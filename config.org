* fixes
** init
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; Bootstrap quelpa
   (if (require 'quelpa nil t)
       (quelpa-self-upgrade)
     (with-temp-buffer
       (url-insert-file-contents "https://framagit.org/steckerhalter/quelpa/raw/master/bootstrap.el")
       (eval-buffer)))

   (setq use-pacakge-ensure-function 'quelpa)
   (setq use-package-always-ensure t)


   ;; Install quelpa-use-package, which will install use-package as well
   (quelpa
    '(quelpa-use-package
      :fetcher git
      :url "https://framagit.org/steckerhalter/quelpa-use-package.git"))
   (require 'quelpa-use-package)
   #+END_SRC
** Basics
#+BEGIN_SRC emacs-lisp :tangle yes
(setq scroll-conservatively 100
      scroll-margin 5
      inhibit-startup-message t
      initial-scratch-message ""
      ring-bell-function 'ignore
      tab-width 2
      display-line-numbers-current-absolute t
      default-directory "/home/bun/"
      tramp-default-method "ssh"
      large-file-warning-threshold nil
      subword-mode t)

;; sane normal keybinds
(global-set-key (kbd "C-s") 'save-buffer)

(defalias 'yes-or-no-p 'y-or-n-p)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-display-line-numbers-mode)

(setq standard-indent 2)

;; Load zshrc
(setq shell-file-name "zsh")
(setq shell-command-switch "-ic")

;; File beautification
(setq delete-trailing-lines t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Electricity!!
(add-hook 'prog-mode-hook 'electric-pair-mode)
;;tmp stuff
(defalias 'sesman-linked-sessions 'sesman--linked-sessions)

;;latex stuff
(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
      org-export-latex-listings 'minted
      org-src-fontify-natively t)

;; font
(add-to-list 'default-frame-alist
	     '(font . "Fira Code-12"))

(use-package cask
  :quelpa t
  :ensure t)
#+END_SRC
** evil-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq evil-want-integration nil
	 evil-want-keybinding nil)

   (use-package evil-leader
     :ensure t
     :quelpa t
     :init
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>"))

   (use-package evil-collection
     :ensure t
     :quelpa t
     :after evil-leader
     :custom
     (evil-collection-company-use-tng nil)
     :init
     (evil-collection-init))

   (use-package evil
     :ensure t
     :quelpa t
     :after evil-collection
     :bind
     (:map evil-normal-state-map
	   ("Â´" . 'evil-goto-mark)
	   ("C-e" . 'merge-buffer)
	   ("," . 'evil-goto-mark))
     :config
     (evil-mode 1)
     (evil-leader/set-key
       ;; buffers & windows
       "b b" 'helm-buffers-list
       "b o" 'other-buffer
       "b i" 'ibuffer
       "o" 'other-window
       "q" 'kill-buffer

       ;; misc
       "a" 'comment-dwim
       "i" 'indent-region
       "w" '(lambda () (interactive)
	      (paredit-mode)
	      (evil-paredit-mode))

       ;;buffer navigation
       "j" 'evil-avy-goto-char

       ;; files
       "f f" 'fzf
       "f d" 'dired-jump
       "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
       "f i" '(lambda () (interactive) (find-file "~/.i3/config"))
       "f z" '(lambda () (interactive) (find-file "~/.zshrc"))
       "f n" '(lambda () (interactive)
		(find-file "/etc/nixos/configuration.nix")
		(sudo-edit))

       ;; Projectile stuff
       "p p" 'projectile-find-file-dwim
       "p a" 'projectile-ag
       "p g" 'projectile-vc

       ;;utilities
       "+" 'calc))

   (use-package evil-surround
     :ensure t
     :quelpa t
     :config
     (global-evil-surround-mode 1))

   (use-package evil-paredit
     :ensure t
     :quelpa t)


   (use-package evil-anzu
     :ensure t
     :quelpa t)
   #+END_SRC

* qol
  Quality of life packages. many require external software. Look at each package for dependecies
** agressive indent
   #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package aggressive-indent
   :ensure t
   :quelpa t
)
   #+END_SRC
** avy
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package avy
      :ensure t
      :quelpa t)
#+END_SRC
** engine
   used to search web resources.
   #+BEGIN_SRC emacs-lisp :tangle yes
(use-package engine-mode
  :ensure t
  :quelpa t
  :config
  (defengine cppreference
    "https://en.cppreference.com/mwiki/index.php?search=%s")
  (defengine google
    "https://google.com/search?q=%s")
  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")
  (defengine dockerhub
    "https://hub.docker.com/search?q=%s&type=image")
  (defengine github
    "https://github.com/search?q=%s")
  (defengine rustdoc
    "https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html?search=%s")
  (defengine wikipedia
    "https://en.wikipedia.org/wiki/%s")
  ;; evil keybindings for search eninges
  (evil-leader/set-key
    "s c" 'engine/search-cppreference
    "s y" 'engine/search-youtube
    "s d" 'engine/search-dockerhub
    "s r" 'engine/search-rustdoc
    "s w" 'engine/search-wikipedia
    "s g i" 'engine/search-github
    "s g o" 'engine/search-google))
   #+END_SRC
** fzf
    this implementation requires either zplug, or some reconfiguration. See my [[https://github.com/fredeeb/dotfiles][dotfiles]] for more info.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fzf
    :ensure t
    :quelpa t
    :custom
    (fzf/executable "~/.zplug/repos/junegunn/fzf-bin/fzf-bin"))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :ensure t
    :quelpa t
    :config (global-hungry-delete-mode))
#+END_SRC
** howdoi
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package howdoi
     :ensure t
     :quelpa t
     :config
     (evil-leader/set-key
       "h" 'howdoi-query-insert-code-snippet-at-point))
   #+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit
  :ensure t
  :quelpa t
  :config
  (evil-leader/set-key
    "m" 'iedit-mode))

(defun iedit-then-hydra ()
  (interactive)
  (iedit-mode)
  (hydra-iedit-menu/body))
#+END_SRC
** openwith
    requires zathura for pdf reading. sxiv for image viewing (not all formats are tested).
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package openwith
    :ensure t
    :quelpa t
    :config
    (openwith-mode t)
    :custom
    (openwith-associations '(("\\.pdf\\'" "zathura" (file))
                             ("\\.png\\'" "sxiv" (file))
                             ("\\.jpg\\'" "sxiv" (file))
                             ("\\.svg\\'" "sxiv" (file))
                             ("\\.jpeg\\'" "sxiv" (file))
                             ("\\.bmp\\'" "sxiv" (file))
                             ("\\.flac\\'" "mpv" (file))
                             ("\\.mp3\\'" "mpv" (file))
			     ("\\.mp4\\'" "mpv" (file)))))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sudo-edit
  :ensure t
  :quelpa t)
#+END_SRC
* language packs
  mostly syntax higlighters
** matlab
    requires [[https://se.mathworks.com/products/matlab.html][matlab]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package matlab-mode
    :ensure t
    :quelpa t
    :hook 'matlab-shell
    :mode ("\\.m\\'" . matlab-mode)
    :custom
    (matlab-indent-function t)
    (matlab-shell-command "matlab"))
#+END_SRC
** docker
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package docker
     :quelpa t
     :ensure t)

   (use-package dockerfile-mode
     :quelpa t
     :ensure t)
   #+END_SRC
** csharp
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package csharp-mode
     :ensure t
     :quelpa t)

   (use-package omnisharp
     :ensure t
     :quelpa t
     :after company
     :config
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
     (add-to-list 'company-backends 'company-omnisharp))
   #+END_SRC
** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :quelpa t
    :custom
    (plantuml-jar-path (expand-file-name (executable-find "plantuml")))
    (org-plantuml-jar-path (replace-regexp-in-string "bin" "lib" (format "%s%s" (expand-file-name (executable-find "plantuml")) ".jar")))
    :magic ("@startuml" . plantuml-mode))

  (use-package flycheck-plantuml
    :ensure t
    :quelpa t)

  ;; recompiles plantuml diagrams on save
(defun recompile-plantuml ()
  (add-hook 'after-save-hook
	    (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))

(add-hook 'plantuml-mode-hook 'recompile-plantuml)
#+END_SRC
** textile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package textile-mode
    :ensure t
    :quelpa t
    :hook '(textile-mode . visual-line-mode)
    :mode ("\\.textile\\'"))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)
     (plantuml . t)
     (shell . t)
     (python .t)
     (makefile . t)
     (calc . t)
     (matlab . t)
     (emacs-lisp . t)
     (js . t)))


  ;;oxes
  (use-package ox-jira :ensure t :quelpa t)
  (use-package ox-html5slide :ensure t :quelpa t)
  (use-package org-re-reveal :ensure t :quelpa t)
  (use-package ox-textile :ensure t :quelpa t)
  (add-to-list 'org-export-backends 'groff)

  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(@/!)" "|" "DONE(d!)")))

  (add-hook 'org-mode-hook 'visual-line-mode)
  (use-package org-ref
    :ensure t
    :quelpa t)

  (use-package org-bullets
    :ensure t
    :quelpa t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (load-file (expand-file-name "~/.emacs.d/elisp/org-macros.el"))

  (use-package org-tree-slide
    :ensure t
    :quelpa t)

  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))

  (use-package polymode
    :ensure t
    :quelpa t)

  (use-package poly-org
    :ensure t
    :quelpa t
    :after polymode
    :mode ("//.org//'"))

  (use-package org-brain
    :ensure t
    :quelpa t
    :config
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
    (evil-leader/set-key
      "n" 'org-brain-goto))
#+END_SRC
** yaml
   #+BEGIN_SRC emacs-lisp :tangle yes
(use-package yaml-mode
  :ensure t
  :quelpa t)
   #+END_SRC
* programming
** company
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :quelpa t
    :init
    (global-company-mode t)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 1))

  (use-package ggtags
    :quelpa t
    :ensure t)
#+END_SRC
** elisp
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package elsa
     :quelpa t
     :ensure t)
   #+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; (use-package cquery
  ;;   :ensure t
  ;;   :quelpa t)
  (use-package ccls
    :quelpa
    :ensure t)

  (use-package lsp-mode
    :ensure t
    :quelpa t
    :commands lsp
    :config (require 'lsp-clients)
    (evil-leader/set-key
      "r d" 'lsp-ui-peek-find-definitions
      "r i" 'lsp-ui-peek-find-implementation
      "r r" 'lsp-ui-peek-find-references
      "r j" 'lsp-ui-find-next-reference
      "r k" 'lsp-ui-find-prev-reference))

  (use-package lsp-ui
    :ensure t
    :quelpa t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :quelpa t
    :commands company-lsp
    :config
    (push 'company-lsp company-backends))

  (use-package dap-mode
    :ensure t
    :quelpa t
    :config (require 'dap-lldb))
#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package clojure-mode
  :ensure t
  :quelpa t
  :config
  (evil-leader/set-key-for-mode 'clojure-mode
    "e" 'cider-eval-last-sexp
    "k" 'cider-eval-buffer))

(use-package cider
  :ensure t
  :quelpa t
  :custom
  (cider-lein-parameters "repl :headless :host localhost"))

(use-package flycheck-clojure
  :ensure t
  :quelpa t)

(use-package helm-clojuredocs
  :ensure t
  :quelpa t)

(use-package cljr-helm
  :ensure t
  :quelpa t
  :config
  (evil-leader/set-key-for-mode 'cider-mode
    "r h" 'cljr-helm
    "r r" 'cider-eval-last-sexp
    "r k" 'cider-eval-buffer
    "r d" 'helm-clojuredocs))
#+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package cargo
     :ensure t
     :quelpa t)

   (use-package toml-mode
     :ensure t
     :quelpa t)

   (add-hook 'rust-mode-hook 'cargo-minor-mode)

   #+END_SRC
** Web
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; everything in one package
    (use-package web-mode
      :ensure t
      :quelpa t
      :mode
      ("\\.js\\'" . web-mode)
      ("\\.css\\'" . web-mode)
      ("\\.jsx\\'" . web-mode)
      ("\\.tsx\\'" . typescript-mode)
      ("\\.html\\'" . web-mode)
      ("\\.scss\\'" . web-mode))

    ;; Macro>overload
    (use-package emmet-mode
      :ensure t
      :quelpa t
      :bind
      ("M-p" . 'emmet-expand-yas))

    ;; server static files
    (use-package impatient-mode
      :ensure t
      :quelpa t)

    ;; typescript lang server
    (use-package tide
      :quelpa t
      :ensure t
      :commands tide-mode
      :mode ("\\.tsx\\'" . tide-mode))

    (use-package react-snippets
      :ensure t
      :quelpa t)

    (use-package json-mode
      :ensure t
      :quelpa t)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet-snippets
    :ensure t
    :quelpa t)

  (use-package react-snippets
    :ensure t)

  (use-package react-snippets
    :ensure t)

  (use-package react-snippets
    :ensure t)

  (use-package yasnippet
    :ensure t
    :quelpa t
    :init
    (yas-global-mode 1))
#+END_SRC
* git stuff
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package evil-magit
     :ensure t
     :quelpa (evil-magit :fetcher github :repo "emacs-evil/evil-magit")
     :config
     (evil-leader/set-key "g s" 'magit-status)
     :custom
     (magit-repository-directories (expand-file-name "~/git/projects")))

   (use-package git-timemachine
     :ensure t
     :quelpa t)

   (setenv "SSH_ASKPASS" "git-gui--askpass")

   (use-package ssh-agency
     :ensure t
     :quelpa t)

  (use-package forge
     :ensure t
     :quelpa t)

   (use-package git-gutter-fringe+
     :quelpa t
     :ensure t
     :config
     (git-gutter+-mode))
   ;; interactive github functions for extra sauce
   (load-file (expand-file-name "~/.emacs.d/elisp/git-extras.el"))
   #+END_SRC
* ui
** ag
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ag
  :ensure t
  :quelpa t)
(use-package helm-ag
  :ensure t
  :quelpa t)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package helm
  :ensure t
  :quelpa t
  :config
  (require 'helm-config)
  (helm-mode)
  :bind
  ("C-x C-f" . 'helm-find-files)
  ("C-x C-b" . 'helm-buffers-list)
  ("M-x" . 'helm-M-x))

(use-package helm-make
  :ensure t
  :quelpa t
  :config
  (evil-leader/set-key "c" 'helm-make-projectile))

(use-package helm-company
  :ensure t
  :quelpa t)

(use-package helm-swoop
  :ensure t
  :quelpa t
  :bind
  (:map evil-normal-state-map
    ("/" . 'helm-swoop)))

(use-package helm-projectile
  :ensure t
  :quelpa t
  :config
  (evil-leader/set-key
    "p p" 'helm-projectile
    "p f" 'helm-projectile-find-file-dwim
    "p a" 'helm-projectile-ag
    "p s" 'projectile-add-known-project
    "p c" 'projectile-compile-project))
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :quelpa t
    :defer t
    :hook (after-init . doom-modeline-init)
    :custom
    (doom-modeline-buffer-file-name-style 'relative-from-project)
    (doom-modeline-height 35)
    (doom-modeline-bar-width 4)
    (doom-modeline-lsp t)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-icon t)
    (doom-modeline-major-mode-color-icon t))
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :quelpa t
    :config
    (load-theme 'doom-challenger-deep t))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :quelpa t
    :init
    (which-key-mode))
#+END_SRC
** frames only
    for better compatibility with i3
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package frames-only-mode
      :ensure t
      :quelpa t)
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :quelpa t
    :init
    (rainbow-delimiters-mode))
#+END_SRC
** treemacs
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package treemacs-evil
     :ensure t
     :quelpa t
     :config
     (evil-leader/set-key
       "u" 'treemacs
       "t p" 'treemacs-add-project-to-workspace
       "t r" 'treemacs-remove-project-from-workspace))
   #+END_SRC
* nix
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nix-mode
  :ensure t
  :quelpa t)

(use-package helm-nixos-options
  :ensure t
  :quelpa t)

(use-package company-nixos-options
  :ensure t
  :quelpa t)
#+END_SRC
