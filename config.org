* Basics
** package.el
   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'package)
   (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		       (not (gnutls-available-p))))
	  (proto (if no-ssl "http" "https")))
     (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
     (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
     (package-initialize))

   (unless (package-installed-p 'use-package)
     (package-refresh-contents)
     (package-install 'use-package))
   #+END_SRC
** evil-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq evil-want-integration t
	 evil-want-keybinding nil)

   (use-package evil-leader :defer t :ensure t
     :init
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>"))

   (use-package evil-collection :defer t :ensure t
     :after evil-leader
     :custom
     (evil-collection-company-use-tng nil)
     :init
     (evil-collection-init))

   (use-package evil :defer t :ensure t
     :after evil-collection
     :config
     (evil-mode 1))

   (use-package evil-paredit :defer t :ensure t)
   (use-package evil-anzu :defer t :ensure t)
   (use-package evil-surround :defer t :ensure t
     :config
     (evil-surround-mode))
   #+END_SRC
** git
   Magit setup.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil-magit :defer t :ensure t
      :init
      (evil-magit-init)
      :custom
      (magit-repository-directories (expand-file-name "~/git/projects")))

    (use-package forge :defer t :ensure t)
    (use-package ssh-agency :defer t :ensure t)

    (setenv "SSH_ASKPASS" "git-gui--askpass")
    #+END_SRC

    Tools for more git integration
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package git-timemachine :defer t :ensure t)
    (use-package git-gutter-fringe+ :defer t :ensure t
      :config
      (git-gutter+-mode))
    #+END_SRC
***  Extra sauce!
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun get-github-repo-field (user repo field)
	"fetches USER/REPO from github api and retrieves FIELD"
	(cdr
	 (assoc field
		(with-current-buffer
		    (url-retrieve-synchronously (format "https://api.github.com/repos/%s/%s" user repo))
		  (json-read-object)))))

      (defun insert-github-repo-field (user repo field)
	"Inserts FIELD from api.github.com/USER/REPO"
	(interactive "sUser: \nsRepo: \nSField: ")
	(insert
	 (format "%s" (get-github-repo-field user repo field))))

      (defun org-insert-github-link (user repo)
	"Inserts a github link at USER/REPO."
	(interactive "sUser: \nsRepo: ")
	(org-github-link (format "%s/%s" user repo)))

      (defun org-github-link (repo)
	(insert (format "[[https://github.com/%s][%s]]" repo repo)))
    #+END_SRC
** misc
   default settings
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq scroll-conservatively 100
	 scroll-margin 0
	 inhibit-startup-message t
	 initial-scratch-message ""
	 ring-bell-function 'ignore
	 tab-width 2
	 display-line-numbers-current-absolute t
	 default-directory (expand-file-name "~/")
	 tramp-default-method "ssh"
	 large-file-warning-threshold nil)


   ;; sane normal keybinds
   (global-subword-mode)
   (defalias 'yes-or-no-p 'y-or-n-p)
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   (global-display-line-numbers-mode)
   (setq standard-indent 2)

   ;; Load zshrc
   (setq shell-file-name "bash")
   (setq shell-command-switch "-c")

   ;; make tramp play nice
   (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

   ;; environments
   (use-package exec-path-from-shell :defer t :ensure t)

   ;; File beautification
   (setq delete-trailing-lines t)
   (add-hook 'before-save-hook 'delete-trailing-whitespace)

   ;; Electricity!!
   (add-hook 'prog-mode-hook 'electric-pair-mode)

   ;;tmp stuff
   (defalias 'sesman-linked-sessions 'sesman--linked-sessions)

   ;;latex stuff
   (setq org-latex-listings 'minted
	 org-latex-packages-alist '(("" "minted") ("AUTO" "babel"))
	 org-latex-pdf-process
	 '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
	 org-export-latex-listings 'minted org-src-fontify-natively t)

   ;; font
   (add-to-list 'default-frame-alist '(font . "Fira Code-12"))
   (setq font-lock-maximum-decoration 3)
   #+END_SRC
* qol
  Quality of life packages. many require external software. Look at each package for dependecies
** editing
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package aggressive-indent :defer t :ensure t)
   (use-package avy :defer t :ensure t)
   (use-package iedit :defer t :ensure t)
   #+END_SRC
** help
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helpful :defer t :ensure t)
  (use-package howdoi :defer t :ensure t)
   #+END_SRC
*** engine
    used to search web resources.
    #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package engine-mode :defer t :ensure t
   :config
   (defengine cppreference
     "https://en.cppreference.com/mwiki/index.php?search=%s")
   (defengine google
     "https://google.com/search?q=%s")
   (defengine youtube
     "https://www.youtube.com/results?search_query=%s")
   (defengine dockerhub
     "https://hub.docker.com/search?q=%s&type=image")
   (defengine github
     "https://github.com/search?q=%s")
   (defengine rustdoc
     "https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html?search=%s")
   (defengine wikipedia
     "https://en.wikipedia.org/wiki/%s"))
    #+END_SRC
** utilities
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package kubernetes :defer t :ensure t)
   (use-package request :defer t :ensure t)
   (use-package sudo-edit :defer t :ensure t)
   (use-package treemacs-evil :defer t :ensure t)
   #+END_SRC
*** docker
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package docker :defer t :ensure t)
    (use-package dockerfile-mode :defer t :ensure t)
    (use-package docker-tramp :defer t :ensure t)
    #+END_SRC
*** openwith
     requires zathura for pdf reading. sxiv for image viewing (not all formats are tested).
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package openwith
     :ensure t
     :config
     (openwith-mode t)
     :custom
     (openwith-associations
      '(("\\.pdf\\'" "zathura" (file))
	("\\.jpg\\'" "sxiv" (file))
	("\\.svg\\'" "sxiv" (file))
	("\\.jpeg\\'" "sxiv" (file))
	("\\.bmp\\'" "sxiv" (file))
	("\\.flac\\'" "mpv" (file))
	("\\.mkv\\'" "mpv" (file))
	("\\.mp3\\'" "mpv" (file))
	("\\.mp4\\'" "mpv" (file)))))
 #+END_SRC
* language packs
** matlab
   requires [[https://se.mathworks.com/products/matlab.html][matlab]]
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package matlab-mode :defer t :ensure t
     :hook (matlab-shell)
     :mode ("\\.m\\'" . matlab-mode)
     :config
     (matlab-cedet-setup)
     :custom
     (matlab-indent-function t)
     (matlab-shell-command "matlab"))
   #+END_SRC
** csharp
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package csharp-mode :defer t :ensure t)
   (use-package omnisharp :defer t :ensure t
     :after company
     :config
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
     (add-to-list 'company-backends 'company-omnisharp))
   #+END_SRC
** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :defer t
    :ensure t
    :custom
    (plantuml-jar-path (expand-file-name (executable-find "plantuml")))
    (org-plantuml-jar-path
     (replace-regexp-in-string
      "bin"
      "lib"
      (format "%s%s" (expand-file-name (executable-find "plantuml")) ".jar")))
    :magic ("@startuml" . plantuml-mode))

  (use-package flycheck-plantuml :defer t :ensure t)

  ;; recompiles plantuml diagrams on save
  (defun recompile-plantuml ()
    (add-hook 'after-save-hook
	      (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))

  (add-hook 'plantuml-mode-hook 'recompile-plantuml)
#+END_SRC
** others
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package auctex :defer t :ensure t)
   (use-package yaml-mode :defer t :ensure t)
   (use-package json-mode :defer t :ensure t)

   ;;scons
   (push '("SConstruct" . python-mode) auto-mode-alist)
   (push '("SConscript" . python-mode) auto-mode-alist)
   #+END_SRC
* org stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages 'org-babel-load-languages
   '((python . t)
     (C . T)
     (clojure . T)
     (plantuml . t)
     (shell . t)
     (python .t)
     (makefile . t)
     (calc . t)
     (matlab . t)
     (emacs-lisp . t)
     (js . t)))

  (use-package ox-reveal :defer t :ensure t)
  (require 'org-tempo)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "FEEDBACK(f)" "|" "DONE(d)" "NOT FINISHED(n)"))
	org-columns-default-format
	"%25ITEM %TODO %DEADLINE %EFFORT %TAGS"
	org-capture-templates
	'(("t" "Todo" entry (file+headline "~/org/agenda.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("n" "Notes" entry (file+headline "~/org/notes.org" "Notes")
           "* %?\n %i\n")))

  (use-package org-ref :defer t :ensure t)
  (use-package org-bullets :defer t :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))


  (use-package org-tree-slide :defer t :ensure t)
  (use-package org-kanban :defer t :ensure t)
  (use-package polymode :defer t :ensure t)
  (use-package poly-org :defer t :ensure t
    :after polymode
    :mode ("//.org//'"))

  (use-package org-brain :defer t :ensure t
    :config
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
    (evil-leader/set-key
      "n" 'org-brain-goto))

  (use-package org-download :defer t :ensure t
    :config
    (add-hook 'dired-mode-hook 'org-download-enable))

  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (add-hook 'org-mode-hook
	    (lambda ()
	      (openwith-mode nil)
	      (org-display-inline-images t)))

  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))
#+END_SRC
** org-extras
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun export-and-find ()
    (interactive)
    (org-latex-export-to-pdf)
    (find-file
     (format "%s.pdf" (file-name-base (buffer-name)))))

  (defun org-latex-include-header (packages)
    "Add a latex header with PACKAGES to the current document."
    (interactive
     (list (split-string (read-string "Package(s): "))))
    (save-excursion
      (if (not (search-backward "#+LATEX_HEADER: \\usepackage" nil t))
	  (if (not (search-backward "#+AUTHOR:" nil t))
	      (goto-char 0)))
      (forward-line)
      (dolist (package packages)
	(insert (concat "#+LATEX_HEADER: \\usepackage{" package "}\n")))))

  (defun org-latex-insert-meta (title author)
    "Insert TITLE and AUTHOR headers for latex."
    (interactive "sTitle: \nsAuthor: ")
    (save-excursion
      (goto-char (point-min))
      (insert "#+TITLE: " title "\n#+AUTHOR: " author "\n#+DATE:" (shell-command-to-string "date \"+%d/%m/%Y\"") "\n")))

  (defun org-reveal-add-root ()
    "Insert Reveal root tag for org-re-reveal exports"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (insert
       (format
	"#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/%s/\n"
	(cdr
	 (assoc 'version
		(with-current-buffer
		    (url-retrieve-synchronously
		     "https://api.cdnjs.com/libraries/reveal.js")
		  (goto-char (+ url-http-end-of-headers 1))
		  (json-read-object))))))))

  (defun org-macros-src-block-add-name (name)
    "Add a NAME to the current sourceblock."
    (interactive "sName: ")
    (save-excursion
      (if (not (search-backward "#+BEGIN_SRC" nil t))
	  (message "Src block not found"))
      (newline)
      (forward-line -1)
      (insert (concat "#+NAME: " name))))
#+END_SRC
** journals
   setting up daily journals
   #+BEGIN_SRC emacs-lisp :tangle yes
   (defvar journal-dir (expand-file-name "~/Dropbox/journals/"))
   (defvar journal
     (format "%sjournal%s.org"
	     journal-dir
	     (truncate-string-to-width
	      (shell-command-to-string "date \"+%Y%m%d\"") 8)))

   (setq initial-buffer-choice journal
	 org-agenda-files (directory-files journal-dir t "^journal[^-].*"))

   (defvar org-journal-template
     (concat
      "#+TITLE: Journal\n"
      "#+DATE: " (shell-command-to-string "date +'%A %d/%m/%Y'")
      "* TODAY\n"
      "** TODO\n"
      "* KANBAN\n"
      "#+BEGIN: kanban\n"
      "#+END:\n"
      "* NOTES"))

   (when (not (file-exists-p journal))
     (write-region org-journal-template nil journal))

   (defun find-journal ()
     "goto `journal'"
     (interactive)
     (find-file journal))
   #+END_SRC
* programming
** company
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package company :defer t :ensure t
     :init
     (global-company-mode t)
     :custom
     (company-idle-delay 0)
     (company-minimum-prefix-length 1))
   #+END_SRC
** lisp
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; paredit!
   (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
   (add-hook 'lisp-mode-hook 'paredit-mode)
   (add-hook 'clojure-mode-hook 'paredit-mode)
   (add-hook 'clojurescript-mode-hook 'paredit-mode)

   ;; common lisp
   (use-package slime :defer t :ensure t)
   (use-package slime-company :defer t :ensure t)

   (load (expand-file-name "~/quicklisp/slime-helper.el"))
   (setq inferior-lisp-program (executable-find "sbcl"))
   (slime-setup '(slime-fancy slime-company))
   ;; get sbcl from package manager
   ;; get quicklisp too https://beta.quicklisp.org/quicklisp.lisp

   ;; elisp
   (use-package elsa :defer t :ensure t)

   ;; clojure
   (use-package clojure-mode :defer t :ensure t)
   (use-package cider :defer t :ensure t
     :custom
     (cider-lein-parameters "repl :headless :host localhost"))

   (use-package flycheck-clojure :defer t :ensure t)
   (use-package helm-clojuredocs :defer t :ensure t)
   (use-package cljr-helm :defer t :ensure t)

   ;; racket
   (use-package racket-mode :defer t :ensure t)
   #+END_SRC
** python
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package pipenv :defer t :ensure t
     :hook (python-mode . pipenv-mode)
     :custom
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended)

   (use-package jedi :defer t :ensure t)
   #+END_SRC
** C++
   #+BEGIN_SRC emacs-lisp :tangle yes
(use-package ccls :defer t :ensure t)
(use-package flycheck-clang-tidy :defer t :ensure t
  :custom
  (flycheck-clang-tidy-build-path ""))

(use-package disaster :defer t :ensure t)
(use-package demangle-mode :defer t :ensure t
  :mode ("\\*assembly\\*"))
   #+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package cargo :defer t :ensure t)
   (use-package toml-mode :defer t :ensure t)
   (add-hook 'rust-mode-hook 'cargo-minor-mode)
   #+END_SRC
** Go
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package go-mode :defer t :ensure t)
   #+END_SRC
** Web
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; everything in one package
    (use-package web-mode :defer t :ensure t
      :mode
      ("\\.js\\'" . web-mode)
      ("\\.ts\\'" . web-mode)
      ("\\.css\\'" . web-mode)
      ("\\.jsx\\'" . web-mode)
      ("\\.tsx\\'" . web-mode)
      ("\\.html\\'" . web-mode)
      ("\\.scss\\'" . web-mode))

    (use-package impatient-mode :defer t :ensure t)
    (use-package lorem-ipsum :defer t :ensure t)
    (use-package emmet-mode :defer t :ensure t
      :custom
      (emmet-expand-jsx-className t))

    (use-package tide :defer t :ensure t
      :commands tide-mode
      :mode ("\\.tsx\\'" . tide-mode))

    (use-package restclient :defer t :ensure t)

#+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package lsp-mode :defer t :ensure t
  :commands lsp
  :init (require 'lsp-clients)
  :config (flycheck-mode))

(use-package lsp-ui :defer t :ensure t
  :commands lsp-ui-mode)

(use-package company-lsp :defer t :ensure t
  :commands company-lsp
  :config
  (push 'company-lsp company-backends))

(use-package dap-mode :defer t :ensure t
  :config (require 'dap-gdb-lldb))

(use-package lsp-treemacs :defer t :ensure t)
(use-package helm-lsp :defer t :ensure t)

(add-hook 'c++-mode-hook 'lsp)
(add-hook 'python-mode-hook 'lsp)
(add-hook 'rust-mode-hook 'lsp)
#+END_SRC
** yasnippet
   All the snippets! (or atleast most of them)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yasnippet-snippets :defer t :ensure t)
   (use-package react-snippets :defer t :ensure t)

   (use-package yasnippet :defer t :ensure t
     :init
     (yas-global-mode 1))

   (use-package auto-yasnippet :defer t :ensure t)

   ;; make company and yasnippet play nice
   (defun company-yasnippet-or-completion ()
     (interactive)
     (let ((yas-fallback-behavior nil))
       (unless (yas-expand)
	 (call-interactively #'company-complete-common))))

   (add-hook 'company-mode-hook
	     (lambda () (substitute-key-definition
		    'company-complete-common
		    'company-yasnippet-or-completion
		    company-active-map)))
   #+END_SRC
* misc
** shell
   insert result from terminal (try "Q" on the next line)
   seq 1 255 | xargs printf "%.2x\n" | fmt -w 49
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun insert-output-of-executed-line ()
       "executes line at point in default shell and inserts stdout"
       (interactive)
       (insert
	(shell-command-to-string
	 (delete-and-extract-region
	  (point-at-bol)
	  (point-at-eol)))))
   #+END_SRC
** nix
 #+begin_SRC emacs-lisp :tangle yes
 (use-package nix-mode :defer t :ensure t)
 (use-package nix-buffer :defer t :ensure t)
 (use-package helm-nixos-options :defer t :ensure t)
 (use-package company-nixos-options :defer t :ensure t)
 #+END_SRC
** mail
   #+BEGIN_SRC emacs-lisp :tangle yes
   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
   (require 'mu4e)
   #+END_SRC
* ui
** helm
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package helm :defer t :ensure t
   :init
   (require 'helm-config)
   (helm-mode))

 (use-package helm-make :defer t :ensure t)
 (use-package helm-company :defer t :ensure t)
 (use-package helm-projectile :defer t :ensure t)
 #+END_SRC
** symbols
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defconst prettify-symbols-alist
       '(("lambda" . ?λ)
	 ("[ ]" . ?☐)
	 ("[X]" . ?☑)
	 ("*" . ?α)
	 ("**" . ?β)
	 ("***" . ?γ)
	 ("****" . ?δ)))

     (add-hook 'org-mode-hook
	       (lambda () (prettify-symbols-mode)))
   #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package doom-themes :defer t :ensure t
     :init
     (load-theme 'doom-dracula t))

   (use-package doom-modeline :defer t :ensure t
     :hook (after-init . doom-modeline-init)
     :custom
     (doom-modeline-buffer-file-name-style 'relative-from-project)
     (doom-modeline-height 35)
     (doom-modeline-bar-width 4)
     (doom-modeline-lsp t)
     (doom-modeline-icon t)
     (doom-modeline-major-mode-icon t)
     (doom-modeline-major-mode-color-icon t))

   (use-package solaire-mode :defer t :ensure t
     :config
     (solaire-global-mode))
   #+END_SRC
** Which key
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package which-key :defer t :ensure t
     :init
     (which-key-mode))
 #+END_SRC
* hotkeys
  #+BEGIN_SRC emacs-lisp :tangle yes
  ;; Leader keys
  (evil-leader/set-key
    ;;buffers & windows
    "b b" 'helm-buffers-list
    "b o" 'other-buffer
    "b i" 'ibuffer
    "o" 'other-window
    "q" '(lambda () (interactive)
	   (kill-buffer)
	   (delete-window))

    ;;misc
    "a" 'comment-dwim
    "i" 'indent-region
    "h" 'howdoi-query-insert-code-snippet-at-point

    ;;buffer navigation
    "j" 'evil-avy-goto-char

    ;;files
    "f f" 'fzf
    "f d" 'dired-jump
    "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
    "f i" '(lambda () (interactive) (find-file "~/.i3/config"))
    "f z" '(lambda () (interactive) (find-file "~/.zshrc"))
    "f j" 'find-journal

    ;;treemacs
    "u" 'treemacs
    "t p" 'treemacs-add-project-to-workspace
    "t r" 'treemacs-remove-project-from-workspace

    ;;lsp
    "r d" 'lsp-ui-peek-find-definitions
    "r i" 'lsp-ui-peek-find-implementation
    "r r" 'lsp-ui-peek-find-references
    "r j" 'lsp-ui-find-next-reference
    "r k" 'lsp-ui-find-prev-reference
    "d" 'lsp-execute-code-action

    ;;Git
    "g s" 'magit-status
    "g t" 'git-timemachine
    "g g" 'global-git-gutter+-mode

    ;;Docker
    "g d" 'docker

    ;;utilities
    "+" 'calc
    "-" 'mu4e
    "<RET>" '(lambda () (interactive) (split-window-sensibly) (other-window 1) (eshell))

    ;;projectile
    "p p" 'helm-projectile
    "p f" 'helm-projectile-find-file-dwim
    "p a" 'helm-projectile-ag
    "p s" 'projectile-add-known-project
    "p c" 'projectile-compile-project
    "c" 'helm-make

    ;;engine
    "s c" 'engine/search-cppreference
    "s y" 'engine/search-youtube
    "s d" 'engine/search-dockerhub
    "s r" 'engine/search-rustdoc
    "s w" 'engine/search-wikipedia
    "s g i" 'engine/search-github
    "s g o" 'engine/search-google)

  (evil-leader/set-key-for-mode 'org-mode
    "m s" 'org-kanban/shift)

  (evil-leader/set-key-for-mode 'cider-mode
    "r h" 'cljr-helm
    "r r" 'cider-eval-last-sexp
    "r k" 'cider-eval-buffer
    "r d" 'helm-clojuredocs
    "e" 'cider-eval-last-sexp
    "k" 'cider-eval-buffer)

  (evil-leader/set-key-for-mode 'emacs-lisp-mode
    "e" 'eval-last-sexp
    "k" 'eval-buffer)

  (setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
  ;;global state
  (evil-define-key nil global-map
    (kbd "C-x C-f") 'helm-find-files
    (kbd "C-x C-b") 'helm-buffers-list
    (kbd "M-x") 'helm-M-x
    (kbd "M-p") 'emmet-expand-yas
    (kbd "C-S-c") 'aya-create
    (kbd "C-S-e") 'aya-expand
    (kbd "C-s") 'save-buffer
    (kbd "C-h f") . 'helpful-function
    (kbd "C-h v") . 'helpful-variable
    (kbd "C-h k") . 'helpful-key)

  (evil-define-key 'normal global-map
    "'" 'evil-goto-mark
    "´" 'evil-goto-mark-line
    "Q" 'insert-output-of-executed-line)

  (evil-define-key 'visual global-map
    "S" 'evil-surround-region)

  ;; orgmode
  (evil-define-key 'normal poly-org-mode-map
    "U" 'export-and-find)

  ;; paredit mode
  (evil-define-key nil paredit-mode-map
    (kbd "M-l") 'paredit-forward-slurp-sexp
    (kbd "M-h") 'paredit-backward-slurp-sexp
    (kbd "M-L") 'paredit-backward-barf-sexp
    (kbd "M-H") 'paredit-forward-barf-sexp)
  #+END_SRC
