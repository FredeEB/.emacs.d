* Fixes
** init
   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
   (package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(add-to-list 'default-frame-alist '(font . "Fira Code-12"))
(set-face-attribute 'default t :font "Fira Code-12")
(load-file "/home/bun/.emacs.d/elisp/utilties.el")
#+END_SRC
** evil-mode
   <C-z> to use emacs keybindings, if you're that kind of person
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package evil-leader
     :ensure t
     :custom
     (evil-want-integration t)
     (evil-want-keybinding nil)
     :init
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>"))

(use-package evil-collection
  :ensure t
  :custom
  (evil-collection-company-use-tng nil)
  :init
  (evil-collection-init))

(use-package evil
  :ensure t
  :after evil-leader
  :config
  (evil-mode 1)
  (evil-leader/set-key
    ;; buffers & windows
    "b b" 'helm-buffers-list
    "b o" 'other-buffer
    "b i" 'ibuffer
    "o" 'other-window
    "q" 'kill-buffer
    ;; misc
    "a" 'comment-dwim

    ;;buffer navigation
    "j" 'evil-avy-goto-char-timer

    ;; files
    "f f" 'fzf
    "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
    "f i" '(lambda () (interactive) (find-file "~/.i3/config"))
    "f z" '(lambda () (interactive) (find-file "~/.zshrc"))

    ;; Projectile stuff
    "p p" 'projectile-find-file-dwim
    "p a" 'projectile-ag
    "p g" 'projectile-vc)
  (evil-leader/set-key-for-mode
    'org-mode "e" 'org-edit-special)
  :bind (
	 :map evil-normal-state-map
	 ("´" . 'evil-goto-mark)
	 ("H" . 'delete-other-windows)
	 ("C-e" . 'merge-buffer)))

(use-package evil-goggles
  :ensure t
  :diminish evil-goggles
  :config
  (evil-goggles-mode))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

;; (use-package evil-mc
;;   :ensure t
;;   :diminish evil-mc
;;   :config
;;   (global-evil-mc-mode 1)
;;   (evil-leader/set-key
;;     "m m" 'evil-mc-make-all-cursors
;;     "m n" 'evil-mc-undo-all-cursors
;;     "m j" 'evil-mc-make-and-goto-next-match
;;     "m k" 'evil-mc-make-and-goto-prev-match))
#+END_SRC
** Basics
#+BEGIN_SRC emacs-lisp :tangle yes
(setq tab-width 3)
(setq scroll-conservatively 100)
(setq scroll-margin 5)
(defalias 'yes-or-no-p 'y-or-n-p)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-startup-message t
      initial-scratch-message ""
      ring-bell-function 'ignore
      tab-width 3
      indent-tabs-mode 1)
(global-subword-mode 1)
(add-hook 'vhdl-mode-hook 'vhdl-electric-mode)
(setq default-directory "/home/bun/"
      tramp-default-method "ssh")
(global-set-key (kbd "C-c o") 'ff-find-other-file)

;; define config shortcut
(defun config-visit()
  (interactive)
  (find-file "/home/bun/.emacs.d/config.org"))

(eval-after-load 'shell
  '(progn
     (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
     (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
     t))

(setq mail-user-agent 'message-user-agent)
(setq user-mail-address "frederikbraendstrup@gmail.com"
      user-full-name "Frede Brændstrup")

;; Load zshrc
(setq shell-file-name "zsh")
(setq shell-command-switch "-ic")

;; File beautification
(setq delete-trailing-lines t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;tmp stuff
(defalias 'sesman-linked-sessions 'sesman--linked-sessions)

(global-display-line-numbers-mode)
(setq display-line-numbers-current-absolute t)
#+END_SRC
* QOL
  Quality of life packages. many require external software. Look at each package for dependecies
** agressive indent
   global mode might be turned off in a later revision. It's kinda obnoxious
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package aggressive-indent
     :ensure t)
   #+END_SRC
** avy
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package avy
      :ensure t)
#+END_SRC
** fzf
    this implementation requires either zplug, or some reconfiguration. See my [[https://github.com/fredeeb/dotfiles][dotfiles]] for more info.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fzf
    :ensure t
    :custom
    (fzf/executable "~/.zplug/repos/junegunn/fzf-bin/fzf-bin"))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit
  :ensure t
  :config
  (defhydra hydra-iedit-menu ()
    ("j" iedit-next-occurrence)
    ("k" iedit-prev-occurrence)
    ("q" iedit-quit)
    ("t" iedit-toggle-selection)
    ("f" iedit-restrict-function))
  (evil-leader/set-key
    "m" 'iedit-then-hydra))

(defun iedit-then-hydra ()
  (interactive)
  (iedit-mode)
  (hydra-iedit-menu/body))
#+END_SRC
** openwith
    requires zathura for pdf reading. feh for image viewing (not all formats are tested).
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package openwith
    :ensure t
    :config
    (openwith-mode t)
    :custom
    (openwith-associations '(("\\.pdf\\'" "zathura" (file))
                             ("\\.png\\'" "feh" (file))
                             ("\\.jpg\\'" "feh" (file))
                             ("\\.svg\\'" "feh" (file))
                             ("\\.jpeg\\'" "feh" (file))
                             ("\\.bmp\\'" "feh" (file))
                             ("\\.flac\\'" "mpv" (file))
                             ("\\.mp3\\'" "mpv" (file))
			     ("\\.mp4\\'" "mpv" (file)))))

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (setq large-file-warning-threshold nil)
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode))
#+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sudo-edit
   	:ensure t)
#+END_SRC
* language packs
  mostly syntax higlighters
** matlab
    requires [[https://se.mathworks.com/products/matlab.html][matlab]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package matlab-mode
    :ensure t
    :hook '(matlab-mode . 'matlab-shell)
    :mode ("\\.m\\'" . matlab-mode)
    :custom
    (matlab-indent-function t)
    (matlab-shell-command "matlab"))
#+END_SRC
** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :custom
    (plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    (org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    :magic ("@startuml" . plantuml-mode))

  (use-package flycheck-plantuml
    :ensure t)
#+END_SRC
** racket
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package racket-mode
  :ensure t)
#+END_SRC
** textile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package textile-mode
    :ensure t
    :hook '(textile-mode . visual-line-mode)
    :mode ("\\.textile\\'"))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)
     (plantuml . t)
     (shell . t)
     (python .t)
     (makefile . t)
     (calc . t)
     (matlab . t)
     (emacs-lisp . t)
     (js . t)))

  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(@/!)" "|" "DONE(d!)")))

  (add-hook 'org-mode-hook 'visual-line-mode)
  (use-package org-ref
    :ensure t)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (load "~/.emacs.d/elisp/org-macros.el")

  (use-package org-tree-slide
    :ensure t)

  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))

  (use-package polymode
    :ensure t)

  (use-package poly-org
    :ensure t
    :after polymode
    :mode ("//.org//'"))
#+END_SRC
* programming
** company for other languages
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company
    :ensure t
    :diminish company
    :init
    (global-company-mode)
    :custom
    (company-show-numbers t)
    (company-idle-delay 0)
    (company-minimum-prefix-length 3))

  (use-package company-flx
    :ensure t
    :config (company-flx-mode +1))

  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))

  (use-package slime
    :ensure t
    :config
    (slime-setup))

  (use-package slime-company
    :ensure t
    :after slime
    :custom
    (inferior-lisp-program "/usr/bin/clisp")
    :hook '(lisp-mode . 'slime))

  (let ((map company-active-map))
    (mapc
     (lambda (x)
       (define-key map (format "%d" x) 'ora-company-number))
     (number-sequence 0 9))
    (define-key map " " (lambda ()
			  (interactive)
			  (company-abort)
			  (self-insert-command 1)))
    (define-key map (kbd "<return>") nil))

  (defun ora-company-number ()
    "Forward to `company-complete-number'.

  Unless the number is potentially part of the canidiate.
  In that case, insert the number"
    (interactive)
    (let* ((k (this-command-keys))
	   (re (concat "^" company-prefix k)))
      (if (cl-find-if (lambda (s) (string-match re s))
		      company-candidates)
	  (self-insert-command 1)
	(concat (company-complete-number (string-to-number k))))))
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package cquery
    :ensure t
    :custom
    (cquery-executable "/usr/bin/cquery")
    (cquery-extra-init-params '(:index (:comments 2) :cacheFormat "msgpack")))

  (use-package lsp-mode
    :ensure t
    :commands lsp)

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)

  (use-package company-lsp
    :ensure t
    :commands company-lsp
    :config
    (push 'company-lsp company-backends))

#+END_SRC
** clojure
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package clojure-mode
    :ensure t
    :config
    (evil-leader/set-key-for-mode 'clojure-mode
      "e" 'cider-eval-last-sexp
      "k" 'cider-eval-buffer))

  (use-package cider
    :ensure t
    :custom
    (cider-lein-parameters "repl :headless :host localhost"))

  (use-package flycheck-clojure
    :ensure t)

  (use-package helm-clojuredocs
    :ensure t)

  (use-package cljr-helm
    :ensure t
    :config
    (evil-leader/set-key-for-mode 'clojure-mode
      "r h" 'cljr-helm))
#+END_SRC
** paredit and friends
#+BEGIN_SRC emacs-lisp :tangle yes
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook   #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook         #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook         #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook       #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook      #'enable-paredit-mode)
  (add-hook 'racket-mode-hook #'enable-paredit-mode)

  (use-package cedit
    :ensure t)
  (use-package evil-paredit
    :ensure t)
#+END_SRC
** web
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package web-mode
      :ensure t
      :hook
      (html-mode))

    (use-package emmet-mode
      :ensure t
      :diminish emmet-mode
      :bind
      ("M-p" . 'emmet-expand-yas))

    (use-package rainbow-mode
      :ensure t
      :diminish rainbow-mode
      :init
      (rainbow-mode 1)
      :hook web-mode)

    (use-package js2-mode
      :ensure t)

    (use-package json-mode
      :ensure t)

#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yasnippet-snippets
    :ensure t)

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package auto-yasnippet
    :ensure t
    :bind
    ("C-c y" . 'aya-create)
    ("C-c u" . 'aya-expand))
#+END_SRC
* git stuff
   #+BEGIN_SRC emacs-lisp :tangle yes
(setenv "SSH_ASKPASS" "git-gui--askpass")
(use-package ssh-agency
  :ensure t)

(use-package evil-magit
  :ensure t
  :config
  (evil-leader/set-key "g s" 'magit-status))

(use-package git-timemachine
  :ensure t)
#+END_SRC
* ui
** ag
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package ag
  :ensure t)
#+END_SRC
** bifocal
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package bifocal
     :ensure t)
   #+END_SRC
** helm
#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package helm
      :ensure t
      :config
      (require 'helm-config)
      (evil-leader/set-key
	"u" 'helm-imenu)
      (helm-mode)
      :bind
      ("C-x C-f" . 'helm-find-files)
      ("C-x C-b" . 'helm-buffers-list)
      ("M-x" . 'helm-M-x))

(use-package helm-make
  :ensure t
  :config
  (evil-leader/set-key "c" 'helm-make))

(use-package helm-company
  :ensure t)

(use-package helm-swoop
  :ensure t
  :bind
  (:map evil-normal-state-map
    ("/" . 'helm-swoop)))

    (use-package helm-xref
      :ensure t)

    (use-package helm-projectile
      :ensure t
      :config
      (evil-leader/set-key
	"p p" 'helm-projectile
	"p f" 'helm-projectile-find-file-dwim
	"p a" 'helm-projectile-ag
	"p s" 'projectile-add-known-project
	"p c" 'projectile-compile-project))
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package neotree
    :ensure t
    :config
    (evil-leader/set-key "i" 'neotree-project-dir-toggle))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
#+END_SRC
** modeline
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-modeline
    :ensure t
    :defer t
    :hook (after-init . doom-modeline-init)
    :custom
    (doom-modeline-buffer-file-name-style 'truncate-with-project))
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-molokai t))
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :diminish which-key
    :init
    (which-key-mode))
#+END_SRC
** frames only
    for better compatibility with i3
#+BEGIN_SRC emacs-lisp :tangle yes
      (use-package frames-only-mode
        :ensure t
        :config
        (frames-only-mode))
#+END_SRC
* nix
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package nix-mode
  :ensure t)

(use-package nix-buffer
  :ensure t)

(use-package nix-sandbox
  :ensure t)
#+END_SRC
