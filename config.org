* Fixes
** evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil 
    :ensure t
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "L")
      (lambda () 
        (interactive)
        (split-window-right)
        (other-window 1)))
    (define-key evil-normal-state-map (kbd "H") 'delete-other-windows)
    (evil-leader/set-key
      "r" 'revert-buffer 
      "b" 'helm-buffers-list
      "o" 'other-window)
    (evil-leader/set-key-for-mode 'org-mode "e" 'org-edit-special))


  (setq evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes))

  (use-package evil-collection
    :after evil
    :ensure t
    :custom
    (evil-collection-company-use-tng nil)
    :init
    (evil-collection-init))

  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))
#+END_SRC

** Basics
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))
    (setq scroll-conservatively 100)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t
        initial-scratch-message ""
        initial-buffer-choice "~/startup.org"
        ring-bell-function 'ignore
        tab-width 3
        indent-tabs-mode 1)
  (global-subword-mode 1)
  (add-hook 'vhdl-mode-hook 'vhdl-electric-mode)
  (setq default-directory "~/"
        tramp-default-method "ssh")
  (global-set-key (kbd "C-c o") 'ff-find-other-file)
  (ido-vertical-mode)

  ;; define config shortcut
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
  (eval-after-load 'shell
    '(progn
       (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
       t))

  ;; Load zshrc
  (setq shell-file-name "zsh")
  (setq shell-command-switch "-ic")

  (global-set-key (kbd "M-d") 'dmenu)


  (add-hook 'prog-mode-hook 'linum-relative-mode)
  (add-hook 'textile-mode-hook 'visual-line-mode)

  (setenv "SSH_ASKPASS" "git-gui--askpass")
  (use-package ssh-agency
    :ensure t)

#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)))
  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
        '(("j" "Journal" entry (file+headline+datetree "~/org/agenda.org" "Journal")
           "* %?\nEntered on %U\n %i\n %a")
          ("a" "Agenda" entry (file+headline "~/org/agenda.org" "Tasks")
           "* TODO %?\n %i\n %a")))

  (setq org-agenda-diary-file '("~/org/Journal.org"))
  (setq org-agenda-files '("~/org/agenda.org")) 

  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
* Packages
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
 :ensure t
 :init
 (aggressive-indent-global-mode 1))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** cmake stuff
#+BEGIN_SRC emacs-lisp
  (use-package cmake-ide
    :ensure t
    :init
    (cmake-ide-setup))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (use-package company-irony-c-headers
      :ensure t)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))
#+END_SRC
** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :init
    (dumb-jump-mode))
#+END_SRC
** emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'clojure-hook 'emmet-mode)
    :bind
    ("M-p" . 'emmet-expand-yas))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
  (setq flycheck-global-modes '(not org-mode))

  (use-package flycheck-clang-analyzer
    :ensure t
    :after flycheck
    :custom
    (flycheck-clang-analyzer-executeable "clang-6.0")
    :config (flycheck-clang-analyzer-setup))
#+END_SRC
** fzf
#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t
    :config
    (evil-leader/set-key "f" 'fzf))
#+END_SRC
** diff-hl
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :ensure t
    :hook
    ((magit-post-refresh-hook . diff-hl-magit-post-refresh))
    :config
    (diff-hl-mode)
    (evil-leader/set-key "n" 'diff-hl-next-hunk)
    (evil-leader/set-key "p" 'diff-hl-previous-hunk))
#+END_SRC
** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
** golden ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :ensure t
       :config
       (golden-ratio-mode 1))
   #+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)) 
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :config (global-hungry-delete-mode))
#+END_SRC
** jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :init
  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))
  :config
  (jedi:install-server))
#+END_SRC
** lock in
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/elisp/lock-in.el")
#+END_SRC
** lisp ui
   doesn't work
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :custom
    (lsp-ui-peek-always-show t))
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** matlab
#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
    (add-to-list
     'auto-mode-alist
     '("\\.m$" . matlab-mode))
    (setq matlab-indent-function t)
    (setq matlab-shell-command "matlab")
  (add-hook 'matlab-mode-hook 'matlab-shell)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    ("C-x g" . 'magit-status))

  (use-package evil-magit
    :ensure t)
#+END_SRC
** mulcursers
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (evil-leader/set-key "m" 'mc/mark-all-like-this))
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (evil-leader/set-key "i" 'neotree-project-dir-toggle))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (load "~/.emacs.d/elisp/org-latex-enhancer.el")
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :init
  (rainbow-mode 1))
(use-package rainbow-delimiters
  :ensure t
  :init
  (rainbow-delimiters-mode))
#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind
    ("M-x" . 'smex))
#+END_SRC
** sudo-edit
   #+BEGIN_SRC emacs-lisp
     (use-package sudo-edit
       :ensure t)
   #+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (:map evil-normal-state-map
                ("/" . 'swiper-all)))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (require 'yasnippet-snippets))

  (use-package auto-yasnippet
    :ensure t
    :bind
    ("C-c y" . 'aya-create)
    ("C-c u" . 'aya-expand))
#+END_SRC
** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :config
    (powerline-center-evil-theme))
  (use-package airline-themes
    :ensure t
    :config
    (load-theme 'airline-molokai t))
#+END_SRC
** Paredit and friends
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  (use-package cedit
    :ensure t)
  (use-package evil-paredit
    :ensure t)
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install))

  (evil-set-initial-state 'pdf-view-mode 'normal)
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

   (setq org-latex-listings 'minted
         org-latex-packages-alist '(("" "minted"))
         org-latex-pdf-process
         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t)
#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init
  (which-key-mode))
#+END_SRC
