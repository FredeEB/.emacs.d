* Basics
** package.el
   #+BEGIN_SRC emacs-lisp :tangle yes
   (require 'package)
   (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
		       (not (gnutls-available-p))))
	  (proto (if no-ssl "http" "https")))
     (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
     (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
     (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")) t)
     (add-to-list 'package-archives (cons "org" (concat proto "://orgmode.org/elpa/")) t)
     (package-initialize))

   (defvar bootstrap-version)
   (let ((bootstrap-file
	  (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	 (bootstrap-version 5))
     (unless (file-exists-p bootstrap-file)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
            'silent 'inhibit-cookies)
	 (goto-char (point-max))
	 (eval-print-last-sexp)))
     (load bootstrap-file nil 'nomessage))

   (straight-use-package 'use-package)
   (setq straight-use-package-by-default t)
   ;; (unless (package-installed-p 'use-package)
   ;;   (package-refresh-contents)
   ;;   (package-install 'use-package))

   ;; (setq use-package-always-defer t
   ;; 	 use-package-always-ensure t)

   #+END_SRC
** evil-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq evil-want-integration t
	 evil-want-keybinding nil)

   (use-package evil-leader
     :init
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>"))

   (use-package evil-collection
     :after evil-leader
     :custom
     (evil-collection-company-use-tng nil)
     :init
     (evil-collection-init))

   (use-package evil
     :after evil-collection
     :config
     (evil-mode 1))

   (use-package evil-paredit)
   (use-package evil-anzu)
   (use-package evil-surround
     :config
     (global-evil-surround-mode))

   (use-package evil-owl
     :custom
     (evil-owl-display-method 'posframe)
     (evil-owl-extra-posfram-args '(:width 50 :height 20))
     (evil-owl-idle-delay 0))
   (evil-owl-mode)
   #+END_SRC
** git
   Magit setup.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil-magit
      :init
      (evil-magit-init)
      :custom
      (magit-repository-directories (expand-file-name "~/git/projects")))

    (use-package forge)
    (use-package ssh-agency)
    (use-package orgit)

    (setenv "SSH_ASKPASS" "git-gui--askpass")
    #+END_SRC

    Tools for more git integration
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package git-timemachine)
    (use-package git-gutter-fringe+
      :config
      (global-git-gutter+-mode))
    #+END_SRC
***  Extra sauce!
    #+BEGIN_SRC emacs-lisp :tangle yes
      (defun get-github-repo-field (user repo field)
	"fetches USER/REPO from github api and retrieves FIELD"
	(cdr
	 (assoc field
		(with-current-buffer
		    (url-retrieve-synchronously (format "https://api.github.com/repos/%s/%s" user repo))
		  (json-read-object)))))

      (defun insert-github-repo-field (user repo field)
	"Inserts FIELD from api.github.com/USER/REPO"
	(interactive "sUser: \nsRepo: \nSField: ")
	(insert
	 (format "%s" (get-github-repo-field user repo field))))

      (defun org-insert-github-link (user repo)
	"Inserts a github link at USER/REPO."
	(interactive "sUser: \nsRepo: ")
	(org-github-link (format "%s/%s" user repo)))

      (defun org-github-link (repo)
	(insert (format "[[https://github.com/%s][%s]]" repo repo)))
    #+END_SRC
** misc
   default settings
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq scroll-conservatively 100
	 scroll-margin 0
	 inhibit-startup-message t
	 initial-scratch-message ""
	 ring-bell-function 'ignore
	 tab-width 2
	 default-directory (expand-file-name "~/")
	 tramp-default-method "ssh"
	 large-file-warning-threshold nil
	 custom-file (expand-file-name "~/.emacs.d/customs.el"))

   ;; sane normal keybinds
   (global-subword-mode)
   (defalias 'yes-or-no-p 'y-or-n-p)
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   (setq standard-indent 2)
   (add-hook 'prog-mode-hook 'display-line-numbers-mode)

   ;; Load zshrc
   (setq shell-file-name "bash")
   (setq shell-command-switch "-c")

   ;; environments
   (use-package exec-path-from-shell
     :config (exec-path-from-shell-initialize))

   ;; make tramp play nice
   (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

   ;; File beautification
   (setq delete-trailing-lines t)
   (add-hook 'before-save-hook 'delete-trailing-whitespace)

   ;; Electricity!!
   (add-hook 'prog-mode-hook 'electric-pair-mode)

   ;;tmp stuff
   (defalias 'sesman-linked-sessions 'sesman--linked-sessions)

   ;;latex stuff
   (setq org-latex-listings 'minted
	 org-latex-packages-alist '(("" "minted") ("AUTO" "babel"))
	 org-latex-pdf-process
	 '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
	 org-export-latex-listings 'minted org-src-fontify-natively t)

   ;; font
   (add-to-list 'default-frame-alist '(font . "Iosevka SS04 13"))
   (setq font-lock-maximum-decoration 3)
   #+END_SRC
** shell
   #+begin_src emacs-lisp :tangle yes
     (use-package vterm
       :custom
       (vterm-shell "zsh"))

     (add-hook 'vterm-mode-hook 'turn-off-evil-mode)
   #+end_src
* qol
  Quality of life packages. many require external software. Look at each package for dependecies
** editing
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package aggressive-indent)
   (use-package avy)
   (use-package iedit)
   #+END_SRC
** help
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helpful)
  (use-package howdoi)
   #+END_SRC
*** engine
    used to search web resources.
    #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package engine-mode
   :config
   (defengine cppreference
     "https://en.cppreference.com/mwiki/index.php?search=%s")
   (defengine google
     "https://google.com/search?q=%s")
   (defengine youtube
     "https://www.youtube.com/results?search_query=%s")
   (defengine dockerhub
     "https://hub.docker.com/search?q=%s&type=image")
   (defengine github
     "https://github.com/search?q=%s")
   (defengine rustdoc
     "https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html?search=%s")
   (defengine wikipedia
     "https://en.wikipedia.org/wiki/%s"))
    #+END_SRC
** utilities
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package kubernetes)
   (use-package request)
   (use-package sudo-edit)
   (use-package treemacs-evil)
   #+END_SRC
*** docker
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package docker)
    (use-package dockerfile-mode)
    (use-package docker-tramp
      :config (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
    #+END_SRC
*** openwith
     requires zathura for pdf reading. sxiv for image viewing (not all formats are tested).
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package openwith
     :config
     (openwith-mode t)
     :custom
     (openwith-associations
      '(("\\.pdf\\'" "zathura" (file))
	("\\.jpg\\'" "sxiv" (file))
	("\\.svg\\'" "sxiv" (file))
	("\\.jpeg\\'" "sxiv" (file))
	("\\.bmp\\'" "sxiv" (file))
	("\\.flac\\'" "mpv" (file))
	("\\.mkv\\'" "mpv" (file))
	("\\.mp3\\'" "mpv" (file))
	("\\.mp4\\'" "mpv" (file)))))
 #+END_SRC
* language packs
** matlab
   requires [[https://se.mathworks.com/products/matlab.html][matlab]]
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package matlab-mode
     :hook (matlab-shell)
     :mode ("\\.m\\'" . matlab-mode)
     :config
     (matlab-cedet-setup)
     :custom
     (matlab-indent-function t)
     (matlab-shell-command "matlab"))
   #+END_SRC
** csharp
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package csharp-mode)
   (use-package omnisharp
     :after company
     :config
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
     (add-to-list 'company-backends 'company-omnisharp))
   #+END_SRC
** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :magic ("@startuml" . plantuml-mode))

  (when (executable-find "plantuml")
    (setq plantuml-jar-path (expand-file-name (executable-find "plantuml"))
	  org-plantuml-jar-path
	  (replace-regexp-in-string
	   "bin"
	   "share/java/plantuml"
	   (format "%s%s" (expand-file-name (executable-find "plantuml")) ".jar"))))

  (use-package flycheck-plantuml)

  ;; recompiles plantuml diagrams on save
  (defun recompile-plantuml ()
    (add-hook 'after-save-hook
	      (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))

  (add-hook 'plantuml-mode-hook 'recompile-plantuml)
#+END_SRC
** others
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yaml-mode)
   (use-package json-mode)
   (use-package protobuf-mode)

   ;;scons
   (push '("SConstruct" . python-mode) auto-mode-alist)
   (push '("SConscript" . python-mode) auto-mode-alist)
   #+END_SRC
* org stuff
** basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'org-mode-hook 'visual-line-mode)

  (org-babel-do-load-languages 'org-babel-load-languages
   '((python . t)
     (C . t)
     (clojure . t)
     (plantuml . t)
     (shell . t)
     (python .t)
     (makefile . t)
     (calc . t)
     (matlab . t)
     (emacs-lisp . t)
     (js . t)))

  (use-package ox-reveal)
  (use-package org-mime)
  (use-package org-ql)

  (require 'org-tempo)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "FEEDBACK(f)" "WAITING(w)" "|" "DONE(d)" "NOT FINISHED(n)"))
	org-columns-default-format
	"%25ITEM %TODO %DEADLINE %EFFORT %TAGS"
	org-capture-templates
	'(("t" "Todo" entry (file+headline journal "TODAY")
           "** TODO %?\n")
          ("n" "Note" entry (file+headline journal "NOTES")
           "** %?\n\n")))


  (use-package org-ref)
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (use-package polymode)
  (use-package poly-org
    :after polymode
    :mode ("//.org//'"))

  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable))

  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (add-hook 'org-mode-hook
	    (lambda ()
	      (openwith-mode nil)
	      (org-display-inline-images t)))

  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))
#+END_SRC
** org-extras
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun export-and-find ()
       (interactive)
       (org-latex-export-to-pdf)
       (when (not (process-status "openwith-process"))
	 (find-file
	  (format "%s.pdf" (file-name-base (buffer-name))))))

     (defun org-latex-include-header (packages)
       "Add a latex header with PACKAGES to the current document."
       (interactive
	(list (split-string (read-string "Package(s): "))))
       (save-excursion
	 (if (not (search-backward "#+LATEX_HEADER: \\usepackage" nil t))
	     (if (not (search-backward "#+AUTHOR:" nil t))
		 (goto-char 0)))
	 (forward-line)
	 (dolist (package packages)
	   (insert (concat "#+LATEX_HEADER: \\usepackage{" package "}\n")))))

     (defun org-latex-insert-meta (title author)
       "Insert TITLE and AUTHOR headers for latex."
       (interactive "sTitle: \nsAuthor: ")
       (save-excursion
	 (goto-char (point-min))
	 (insert "#+TITLE: " title "\n#+AUTHOR: " author "\n#+DATE:" (shell-command-to-string "date \"+%d/%m/%Y\"") "\n")))

     (defun org-reveal-add-root ()
       "Insert Reveal root tag for org-re-reveal exports"
       (interactive)
       (save-excursion
	 (goto-char (point-min))
	 (insert
	  (format
	   "#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/%s/\n"
	   (cdr
	    (assoc 'version
		   (with-current-buffer
		       (url-retrieve-synchronously
			"https://api.cdnjs.com/libraries/reveal.js")
		     (goto-char (+ url-http-end-of-headers 1))
		     (json-read-object))))))))

     (defun org-macros-src-block-add-name (name)
       "Add a NAME to the current sourceblock."
       (interactive "sName: ")
       (save-excursion
	 (if (not (search-backward "#+BEGIN_SRC" nil t))
	     (message "Src block not found"))
	 (newline)
	 (forward-line -1)
	 (insert (concat "#+NAME: " name))))
#+END_SRC
** journals
   setting up daily journals
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defvar journal-dir
       (expand-file-name "~/Dropbox/journals/"))

     (defvar journal
       (format "%sjournal%s.org"
	       journal-dir
	       (format-time-string "%Y%m%d")))

     (setq initial-buffer-choice journal
	   org-agenda-files (directory-files journal-dir t "^journal[0-9]+\.org$"))

     (defvar org-journal-template
       (concat
	"#+TITLE: Journal\n"
	"#+DATE: " (format-time-string "%A %d/%m/%Y\n")
	"* TODAY\n"
	"* NOTES"))

     (when (not (file-exists-p journal))
       (write-region org-journal-template nil journal))

     (defun find-journal (days-ago)
       "Find journal from DAYS-AGO"
       (interactive "p")
       (if (not current-prefix-arg)
	   (find-file
	    journal)
	 (find-file
	  (concat
	   journal-dir
	   "journal"
	   (format-time-string
	    "%Y%m%d"
	    (seconds-to-time (- (time-to-seconds) (* days-ago 86400))))
	   ".org"))))
   #+END_SRC
* programming
** company
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package company
       :hook (prog-mode . company-mode)
       :custom
       (company-idle-delay 0)
       (company-minimum-prefix-length 1))
   #+END_SRC
** lisp
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package parinfer)
     ;; paredit!
     (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
     (add-hook 'lisp-mode-hook 'paredit-mode)
     (add-hook 'clojure-mode-hook 'paredit-mode)
     (add-hook 'clojurescript-mode-hook 'paredit-mode)

     ;; elisp
     (use-package elsa)
     (use-package eros
       :hook (eros-mode . emacs-lisp-mode))

     ;; clojure
     (use-package clojure-mode)
     (use-package cider
       :custom
       (cider-lein-parameters "repl :headless :host localhost")
       :hook (cider-enlighten-mode . cider-mode))

     (setq nrepl-use-ssh-fallback-for-remote-hosts t)

     (use-package flycheck-clojure)
     (use-package helm-clojuredocs)
     (use-package cljr-helm)

     ;; racket
     (use-package racket-mode)
   #+END_SRC
** python
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package pipenv
     :hook (python-mode . pipenv-mode)
     :custom
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended)

   (use-package jedi)
   #+END_SRC
** elixir
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package elixir-mode)
     (use-package alchemist
       :hook (elixir-mode . alchemist-mode))
   #+END_SRC
** c++
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package ccls)
     (use-package clang-format)
     (use-package flycheck-clang-tidy
       :custom
       (flycheck-clang-tidy-build-path "")
       (flycheck-clang-language-standard "c++2a"))

     (use-package disaster)
     (use-package demangle-mode
       :mode ("\\*assembly\\*"))
   #+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package cargo
       :hook (rust-mode . cargo-minor-mode))
     (use-package toml-mode)
   #+END_SRC
** haskell
   #+begin_src emacs-lisp :tangle yes
     (use-package haskell-mode)
     (use-package lsp-haskell)
   #+end_src
** go
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package go-mode
       :config
       (push (expand-file-name "~/go/bin") exec-path))

   (defun go-run ()
     (interactive)
     (save-buffer)
     (let ((buffer "*go*"))
       (start-process "*go*" buffer "go" "run" (buffer-name))
       (switch-to-buffer buffer)
       (view-mode)))
   #+END_SRC
** web
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; everything in one package
    (use-package web-mode
      :mode
      ("\\.js\\'" . web-mode)
      ("\\.ts\\'" . web-mode)
      ("\\.css\\'" . web-mode)
      ("\\.jsx\\'" . web-mode)
      ("\\.tsx\\'" . web-mode)
      ("\\.html\\'" . web-mode)
      ("\\.scss\\'" . web-mode))

    (use-package npm-mode)
    (use-package impatient-mode)
    (use-package lorem-ipsum)
    (use-package emmet-mode
      :custom
      (emmet-expand-jsx-className t))

    (use-package restclient)
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-lsp)
  (use-package lsp-mode
    :config
    (require 'ccls)
    (require 'lsp-clients)
    :hook ((c-mode c++-mode rust-mode go-mode python-mode) . lsp))
  (use-package lsp-ui)
  (use-package dap-mode)

#+END_SRC
** yasnippet
   All the snippets! (or atleast most of them)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yasnippet-snippets)
   (use-package react-snippets)

   (use-package yasnippet
     :init
     (yas-global-mode 1))

   (use-package auto-yasnippet)

   ;; make company and yasnippet play nice
   (defun company-yasnippet-or-completion ()
     (interactive)
     (let ((yas-fallback-behavior nil))
       (unless (yas-expand)
	 (call-interactively #'company-complete-common))))

   (add-hook 'company-mode-hook
	     (lambda () (substitute-key-definition
		    'company-complete-common
		    'company-yasnippet-or-completion
		    company-active-map)))
   #+END_SRC
* misc
** shell
   insert result from terminal (try "Q" on the next line)
   seq 1 255 | xargs printf "%.2x\n" | fmt -w 49
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun insert-output-of-executed-line ()
       "executes line at point in default shell and inserts stdout"
       (interactive)
       (insert
	(shell-command-to-string
	 (delete-and-extract-region
	  (point-at-bol)
	  (point-at-eol)))))

     (use-package vterm)
   #+END_SRC
** nix
 #+begin_SRC emacs-lisp :tangle yes
 (use-package nix-mode)
 (use-package nix-buffer)
 (use-package helm-nixos-options)
 (use-package company-nixos-options)
 #+END_SRC
** mail
   #+BEGIN_SRC emacs-lisp :tangle yes
     (when (file-exists-p "/usr/share/emacs/site-lisp/mu4e")
       (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
       (require 'mu4e)

       (use-package mu4e-alert))
   #+END_SRC
** media
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package emms)
   #+END_SRC
** slack
   #+begin_src emacs-lisp :tangle yes
     (use-package slack)
   #+end_src
** calctex
   #+begin_src emacs-lisp :tangle yes
     (straight-use-package '(calctex :type git :repo "https://github.com/johnbcoughlin/calctex"))
   #+end_src
** doxymacs
* ui
** helm
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package helm
   :init
   (require 'helm-config)
   (helm-mode))

 (use-package helm-make)
 (use-package helm-company)
 (use-package helm-projectile)
 (use-package f3)
 (use-package helm-rg)
 #+END_SRC
** symbols
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defconst prettify-symbols-alist
       '(("lambda" . ?λ)
	 ("[ ]" . ?☐)
	 ("[X]" . ?☑)
	 ("* " . ?α)
	 ("** " . ?β)
	 ("*** " . ?γ)
	 ("**** " . ?δ)))

     (add-hook 'org-mode-hook
	       (lambda () (prettify-symbols-mode)))
   #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package doom-themes
     :init
     (load-theme 'doom-dracula t))

   (use-package doom-modeline
     :hook (after-init . doom-modeline-init)
     :custom
     (doom-modeline-buffer-file-name-style 'relative-from-project)
     (doom-modeline-height 35)
     (doom-modeline-bar-width 4)
     (doom-modeline-icon t)
     (doom-modeline-major-mode-icon t)
     (doom-modeline-major-mode-color-icon nil)
     (doom-modeline-segment--mu4e t))

   (use-package solaire-mode
     :config
     (solaire-global-mode))
   #+END_SRC
** posframe
   #+begin_src emacs-lisp :tangle yes
     (use-package flycheck-posframe)
     (company-posframe-mode)

     (use-package company-posframe)
     (flycheck-posframe-mode)
   #+end_src
** which key
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package which-key
     :init
     (which-key-mode))
 #+END_SRC
* hotkeys
  #+BEGIN_SRC emacs-lisp :tangle yes
  ;; Leader keys
  (evil-leader/set-key
    ;;buffers & windows
    "b" 'helm-buffers-list
    "o" 'other-window
    "q" '(lambda () (interactive)
	   (kill-buffer)
	   (delete-window))

    ;;misc
    "a" 'comment-dwim
    "i" 'indent-region
    "h" 'howdoi-query-insert-code-snippet-at-point

    ;;buffer navigation
    "j" 'evil-avy-goto-char

    ;;files
    "f f" 'f3
    "f d" 'dired-jump
    "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
    "f i" '(lambda () (interactive) (find-file "~/.i3/config"))
    "f z" '(lambda () (interactive) (find-file "~/.zshrc"))
    "f p" '(lambda () (interactive) (find-file "~/git/projects"))
    "f j" 'find-journal

    ;;treemacs
    "u" 'treemacs
    "t p" 'treemacs-add-project-to-workspace
    "t r" 'treemacs-remove-project-from-workspace

    ;;Git
    "g s" 'magit-status
    "g t" 'git-timemachine
    "g g" 'global-git-gutter+-mode

    ;;lsp
    "r r" 'lsp-rename
    "r e" 'lsp-execute-code-action

    ;;Docker
    "g d" 'docker

    ;;utilities
    "+" 'calc
    "-" 'mu4e
    "<RET>" '(lambda () (interactive) (split-window-sensibly) (other-window 1) (vterm))
    "'" '(lambda () (interactive) (split-window-sensibly) (other-window 1) (eshell))

    ;;projectile
    "p p" 'helm-projectile
    "p f" 'helm-projectile-find-file-dwim
    "p a" 'helm-projectile-rg
    "p s" 'projectile-add-known-project
    "p c" 'projectile-compile-project
    "c" 'helm-make-projectile

    ;;engine
    "s c" 'engine/search-cppreference
    "s y" 'engine/search-youtube
    "s d" 'engine/search-dockerhub
    "s r" 'engine/search-rustdoc
    "s w" 'engine/search-wikipedia
    "s g i" 'engine/search-github
    "s g o" 'engine/search-google

    ;; window management
    "w w" 'tear-off-window
    "w h" 'windmove-swap-states-left
    "w j" 'windmove-swap-states-down
    "w k" 'windmove-swap-states-up
    "w l" 'windmove-swap-states-right)

  (setq windmove-wrap-around t)
  (evil-leader/set-key-for-mode 'org-mode
    "m s" 'org-kanban/shift)

  (evil-leader/set-key-for-mode 'cider-mode
    "r h" 'cljr-helm
    "r r" 'cider-eval-last-sexp
    "r k" 'cider-eval-buffer
    "r d" 'helm-clojuredocs
    "e" 'cider-eval-last-sexp
    "k" 'cider-eval-buffer)

  (evil-leader/set-key-for-mode 'emacs-lisp-mode
    "e" 'eval-last-sexp
    "k" 'eval-buffer)

  (setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
  ;;global state
  (evil-define-key nil global-map
    (kbd "C-x C-f") 'helm-find-files
    (kbd "C-x C-b") 'helm-buffers-list
    (kbd "M-x") 'helm-M-x
    (kbd "M-p") 'emmet-expand-yas
    (kbd "C-S-c") 'aya-create
    (kbd "C-S-e") 'aya-expand
    (kbd "C-s") 'save-buffer
    (kbd "C-h f") 'helpful-function
    (kbd "C-h v") 'helpful-variable
    (kbd "C-h k") 'helpful-key
    (kbd "C-c l") 'org-store-link
    (kbd "C-c a") 'org-todo-list
    (kbd "C-c c") 'org-capture)

  (evil-define-key nil go-mode-map
    (kbd "C-c C-c") 'go-run)

  (evil-define-key 'normal global-map
    "'" 'evil-goto-mark
    "´" 'evil-goto-mark-line
    "Q" 'insert-output-of-executed-line)

  (evil-define-key 'visual global-map
    "S" 'evil-surround-region)

  ;; orgmode
  (evil-define-key 'normal poly-org-mode-map
    "U" 'export-and-find
    "L" 'org-shiftright
    "H" 'org-shiftleft)

  ;; paredit mode
  (evil-define-key nil paredit-mode-map
    (kbd "M-l") 'paredit-forward-slurp-sexp
    (kbd "M-h") 'paredit-backward-slurp-sexp
    (kbd "M-L") 'paredit-backward-barf-sexp
    (kbd "M-H") 'paredit-forward-barf-sexp)

  (evil-define-key nil cider-repl-mode
    (kbd "C-k") 'cider-repl-backward-input
    (kbd "C-j") 'cider-repl-forward-input)
  #+END_SRC
