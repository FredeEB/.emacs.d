* Fixes
** init 
   #+BEGIN_SRC emacs-lisp :tangle yes
     (require 'package)
     (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                         (not (gnutls-available-p))))
            (proto (if no-ssl "http" "https")))
       ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
       (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
       (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
       (when (< emacs-major-version 24)
         ;; For important compatibility libraries like cl-lib
         (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))
     (package-initialize)

     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(ansi-color-names-vector
        ["#272822" "#F92672" "#A6E22E" "#E6DB74" "#66D9EF" "#FD5FF0" "#A1EFE4" "#F8F8F2"])
      '(company-idle-delay 0)
      '(company-minimum-prefix-length 2)
      '(compilation-message-face (quote default))
      '(custom-safe-themes
        (quote
         ("bd7b7c5df1174796deefce5debc2d976b264585d51852c962362be83932873d9" "73a13a70fd111a6cd47f3d4be2260b1e4b717dbf635a9caee6442c949fad41cd" "a94f1a015878c5f00afab321e4fef124b2fc3b823c8ddd89d360d710fc2bddfc" "66aea5b7326cf4117d63c6694822deeca10a03b98135aaaddb40af99430ea237" "8aebf25556399b58091e533e455dd50a6a9cba958cc4ebb0aab175863c25b9a4" "b181ea0cc32303da7f9227361bb051bbb6c3105bb4f386ca22a06db319b08882" "af717ca36fe8b44909c984669ee0de8dd8c43df656be67a50a1cf89ee41bde9a" "3eb93cd9a0da0f3e86b5d932ac0e3b5f0f50de7a0b805d4eb1f67782e9eb67a4" "d21135150e22e58f8c656ec04530872831baebf5a1c3688030d119c114233c24" default)))
      '(ecb-options-version "2.50")
      '(evil-collection-company-use-tng nil)
      '(fci-rule-color "#3C3D37")
      '(flycheck-clang-analyzer-executeable "clang-6.0" t)
      '(frame-background-mode (quote dark))
      '(highlight-changes-colors (quote ("#FD5FF0" "#AE81FF")))
      '(highlight-tail-colors
        (quote
         (("#3C3D37" . 0)
          ("#679A01" . 20)
          ("#4BBEAE" . 30)
          ("#1DB4D0" . 50)
          ("#9A8F21" . 60)
          ("#A75B00" . 70)
          ("#F309DF" . 85)
          ("#3C3D37" . 100))))
      '(initial-frame-alist (quote ((fullscreen . maximized))))
      '(org-agenda-files nil)
      '(org-babel-load-languages
        (quote
         ((python . t)
          (C . T)
          (sh . t)
          (makefile . t)
          (matlab . t)
          (emacs-lisp . t))))
      '(org-bullets-face-name (quote Fira\ Code\ Retina))
      '(org-capture-templates
        (quote
         (("j" "Journal" entry
           (file+olp+datetree "~/org/Journal.org" "Entries")
           "* %?
     Entered on %U
      %i
      %a"))) t)
      '(package-selected-packages
        (quote
         (lsp-clangd evil-mc sesman cider clojure-mode ace-window treemacs fancy-battery ## plantuml-mode auctex emmet-mode web-mode spotify textile-mode matlab-mode dumb-jump projectile evil-surround org-bullets solarized-theme lua-mode ecb ecb-autoloads minted lsp-ui org-ref org-latex evil-goggles evil-goggles-mode evil-magit jedi company-jedi company-irony-c-headers cmake-project cmake-ide irony-eldoc company-irony company rainbow-delimiters aggressive-indent agressive-indent yasnippet-snippets exwm spaceline hungry-delete dmenu rainbow-mode avy smex beacon markdown-mode polymode which-key use-package)))
      '(plantuml-jar-path "/usr/bin/plantuml")
      '(pos-tip-background-color "#FFFACE")
      '(pos-tip-foreground-color "#272822")
      '(python-shell-completion-native-disabled-interpreters (quote ("python" "pypy" "ipython")))
      '(send-mail-function (quote smtpmail-send-it))
      '(smtpmail-smtp-server "smtp.gmail.com" t)
      '(smtpmail-smtp-service 587 t)
      '(vc-annotate-background nil)
      '(vc-annotate-color-map
        (quote
         ((20 . "#F92672")
          (40 . "#CF4F1F")
          (60 . "#C26C0F")
          (80 . "#E6DB74")
          (100 . "#AB8C00")
          (120 . "#A18F00")
          (140 . "#989200")
          (160 . "#8E9500")
          (180 . "#A6E22E")
          (200 . "#729A1E")
          (220 . "#609C3C")
          (240 . "#4E9D5B")
          (260 . "#3C9F79")
          (280 . "#A1EFE4")
          (300 . "#299BA6")
          (320 . "#2896B5")
          (340 . "#2790C3")
          (360 . "#66D9EF"))))
      '(vc-annotate-very-old-color nil)
      '(weechat-color-list
        (quote
         (unspecified "#272822" "#3C3D37" "#F70057" "#F92672" "#86C30D" "#A6E22E" "#BEB244" "#E6DB74" "#40CAE4" "#66D9EF" "#FB35EA" "#FD5FF0" "#74DBCD" "#A1EFE4" "#F8F8F2" "#F8F8F0"))))
     (custom-set-faces
      ;; custom-set-faces was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(default ((t (:family "Fira Code Retina" :foundry "outline" :slant normal :weight normal :height 141 :width normal))))
      '(company-scrollbar-bg ((t (:background "#3d3d3d"))))
      '(company-scrollbar-fg ((t (:background "#303030"))))
      '(company-tooltip ((t (:inherit default :background "#292929"))))
      '(company-tooltip-common ((t (:inherit font-lock-constant-face))))
      '(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
      '(helm-buffer-directory ((t (:foreground "DarkRed"))))
      '(minibuffer-prompt ((t (:background "#e6db74" :foreground "#222" :box nil)))))

   #+END_SRC
** evil-mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))

  (use-package evil 
    :ensure t
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "L")
      (lambda () 
        (interactive)
        (split-window-right)
        (other-window 1)))
    (define-key evil-normal-state-map (kbd "H") 'delete-other-windows)
    (evil-leader/set-key
      "b" 'helm-buffers-list
      "o" 'other-window
      "q" 'kill-buffer)
    (evil-leader/set-key-for-mode 'org-mode "e" 'org-edit-special))

  (use-package evil-collection
    :ensure t
    :after evil
    :custom
    (evil-collection-company-use-tng nil)
    :init
    (evil-collection-init))

  (use-package evil-goggles
    :ensure t
    :diminish evil-goggles
    :config
    (evil-goggles-mode))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-mc
    :ensure t
    :diminish evil-mc
    :config
    (global-evil-mc-mode 1)
    (evil-leader/set-key "m" 'evil-mc-make-all-cursors)
    (evil-leader/set-key "n" 'evil-mc-undo-all-cursors)
    (evil-leader/set-key "j" 'evil-mc-make-and-go-to-next-match))
#+END_SRC
** Basics
#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :ensure t
    :config
    (load-theme 'monokai t))
  (setq scroll-conservatively 100)
  (setq scroll-margin 5)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t
        initial-scratch-message ""
        initial-buffer-choice "~/startup.org"
        ring-bell-function 'ignore
        tab-width 3
        indent-tabs-mode 1)
  (global-subword-mode 1)
  (add-hook 'vhdl-mode-hook 'vhdl-electric-mode)
  (setq default-directory "~/"
        tramp-default-method "ssh")
  (global-set-key (kbd "C-c o") 'ff-find-other-file)

  ;; define config shortcut
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (eval-after-load 'shell
    '(progn
       (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
       t))

  ;; Load zshrc
  (setq shell-file-name "zsh")
  (setq shell-command-switch "-ic")

  (global-set-key (kbd "M-d") 'dmenu)

  (add-hook 'textile-mode-hook 'visual-line-mode)

  (setenv "SSH_ASKPASS" "git-gui--askpass")
  (use-package ssh-agency
    :ensure t)

  ;;tmp stuff
  (defalias 'sesman-linked-sessions 'sesman--linked-sessions)
#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)))
  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
        '(("j" "Journal" entry (file+headline+datetree "~/org/agenda.org" "Journal")
           "* %?\nEntered on %U\n %i\n %a")
          ("a" "Agenda" entry (file+headline "~/org/agenda.org" "Tasks")
           "* TODO %?\n %i\n %a")))

  (setq org-agenda-diary-file '("~/org/Journal.org"))
  (setq org-agenda-files '("~/org/agenda.org")) 

  (add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC
* Packages
** all the icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
** agressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish aggressive-indent
    :init
    (aggressive-indent-global-mode 1))
#+END_SRC
** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon
    :init
    (beacon-mode 1))
#+END_SRC
** clojure stuff
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
  (use-package cider
    :ensure t)
#+END_SRC
** cmake stuff
#+BEGIN_SRC emacs-lisp
  (use-package cmake-ide
    :ensure t
    :init
    (cmake-ide-setup))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company
    :init
    (global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (use-package company-irony-c-headers
      :ensure t)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

#+END_SRC
** dumb-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :diminish dumb-jump
    :init
    (dumb-jump-mode))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck
    :init
    (global-flycheck-mode t)
    :custom
    (flycheck-global-modes '(not org-mode)))

  (use-package flycheck-clang-analyzer
    :ensure t 
    :after flycheck
    :custom
    (flycheck-clang-analyzer-executeable "clang-6.0")
    :config (flycheck-clang-analyzer-setup))
#+END_SRC
** fzf
#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t 
    :config
    (evil-leader/set-key "f" 'fzf)
    :custom
    (fzf/executable "~/.zplug/repos/junegunn/fzf-bin/fzf-bin"))
#+END_SRC
** git stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package github-clone
    :ensure t)
  (use-package diff-hl
    :ensure t 
    :hook
    (magit-post-refresh-hook . diff-hl-magit-post-refresh)
    :config
    (diff-hl-mode)
    (evil-leader/set-key "g n" 'diff-hl-next-hunk)
    (evil-leader/set-key "g p" 'diff-hl-previous-hunk))
#+END_SRC
** go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
** golden ratio
   #+BEGIN_SRC emacs-lisp
     (use-package golden-ratio
       :ensure t
       :diminish golden-ratio
       :config
       (golden-ratio-mode 1))
   #+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)) 

  (use-package helm-make
    :ensure t
    :config
    (evil-leader/set-key "c" 'helm-make))
#+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC
** ido
#+BEGIN_SRC emacs-lisp
    (use-package ido-vertical-mode
      :ensure t
      :config 
    (ido-vertical-mode))
#+END_SRC
** jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :config
  (jedi:install-server))
#+END_SRC
** linum
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package linum-relative
       :ensure t 
       :config
       (add-hook 'prog-mode-hook 'linum-on))
   #+END_SRC
** lock in
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/elisp/lock-in.el")
#+END_SRC
** lsp ui
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :custom
    (lsp-ui-peek-always-show t))
#+END_SRC
** lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
** matlab
#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :ensure t
    :custom
    (matlab-indent-function t)
    (matlab-shell-command "matlab")
    :hook matlab-shell
    :mode "\\.m$")
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (evil-leader/set-key "g" 'magit-status))
    (use-package evil-magit
      :ensure t)
#+END_SRC
** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (evil-leader/set-key "i" 'neotree-project-dir-toggle))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (load "~/.emacs.d/elisp/org-latex-enhancer.el")
#+END_SRC
** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :init
    (rainbow-mode 1))
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode))
#+END_SRC
** rtags
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package rtags
    :ensure t
    :config
    (evil-leader/set-key
      "r f" 'rtags-find-file
      "r c" 'cmake-ide-compile
      "r C" 'cmake-ide-run-cmake
      "r g" 'rtags-find-symbol
      "r j" 'next-error))

#+END_SRC
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind
    ("M-x" . 'smex))
#+END_SRC
** sudo-edit
   #+BEGIN_SRC emacs-lisp
     (use-package sudo-edit
       :ensure t)
   #+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (:map evil-normal-state-map
                ("/" . 'swiper-all)))
#+END_SRC

** textmodes
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package textile-mode
    :ensure t)
#+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1)
    :config
    (require 'yasnippet-snippets))

  (use-package auto-yasnippet
    :ensure t
    :bind
    ("C-c y" . 'aya-create)
    ("C-c u" . 'aya-expand))
#+END_SRC
** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :custom
    (powerline-default-theme))
  (use-package airline-themes
    :ensure t
    :config
    (load-theme 'airline-molokai))
#+END_SRC
** Paredit and friends
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)

  (use-package cedit
    :ensure t)
  (use-package evil-paredit
    :ensure t)
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :init
    (pdf-tools-install))

  (evil-set-initial-state 'pdf-view-mode 'normal)
  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

   (setq org-latex-listings 'minted
         org-latex-packages-alist '(("" "minted"))
         org-latex-pdf-process
         '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
           "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :hook
    (html-mode))
  (use-package emmet-mode
    :ensure t
    :diminish emmet-mode
    :config
    (add-hook 'clojure-hook 'emmet-mode)
    :bind
    ("M-p" . 'emmet-expand-yas))

#+END_SRC
** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key
    :init
    (which-key-mode))

#+END_SRC
