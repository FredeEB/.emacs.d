* Fixes
** evil-mode
   <C-z> to use emacs keybindings
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :custom
    (evil-want-integration t)
    (evil-want-keybinding nil)
    :init
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))

  (use-package evil-collection
    :ensure t
    :custom
    (evil-collection-company-use-tng nil)
    :init
    (evil-collection-init))

  (use-package evil 
    :ensure t
    :after evil-leader
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map (kbd "L")
      (lambda () 
        (interactive)
        (split-window-right)
        (other-window 1)))
    (define-key evil-normal-state-map (kbd "H") 'delete-other-windows)
    (evil-leader/set-key
      "b" 'helm-buffers-list
      "o" 'other-window
      "q" 'kill-buffer
      "a" 'comment-dwim)
    (evil-leader/set-key-for-mode 'org-mode "e" 'org-edit-special))

  (use-package evil-goggles
    :ensure t
    :diminish evil-goggles
    :config
    (evil-goggles-mode))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-mc
    :ensure t
    :diminish evil-mc
    :config
    (global-evil-mc-mode 1) 
    (evil-leader/set-key
      "m m" 'evil-mc-make-all-cursors
      "m n" 'evil-mc-undo-all-cursors
      "m j" 'evil-mc-make-and-goto-next-match
      "m k" 'evil-mc-make-and-goto-prev-match))
#+END_SRC
** Basics
#+BEGIN_SRC emacs-lisp
  (setq tab-width 3)
  (setq scroll-conservatively 100)
  (setq scroll-margin 5)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t
        initial-scratch-message ""
        initial-buffer-choice "~/startup.org"
        ring-bell-function 'ignore
        tab-width 3
        indent-tabs-mode 1)
  (global-subword-mode 1)
  (add-hook 'vhdl-mode-hook 'vhdl-electric-mode)
  (setq default-directory "~/"
        tramp-default-method "ssh")
  (global-set-key (kbd "C-c o") 'ff-find-other-file)

  ;; define config shortcut
  (defun config-visit()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (eval-after-load 'shell
    '(progn
       (autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
       (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on t)
       t))

  ;; Load zshrc
  (setq shell-file-name "zsh")
  (setq shell-command-switch "-ic")

  (global-set-key (kbd "M-d") 'dmenu)

  (add-hook 'textile-mode-hook 'visual-line-mode)

  (setenv "SSH_ASKPASS" "git-gui--askpass")
  (use-package ssh-agency
    :ensure t)

  ;;tmp stuff
  (defalias 'sesman-linked-sessions 'sesman--linked-sessions)
#+END_SRC
* Packages
** QOF
   Quality of life packages. many require external software. Look at each package for dependecies
*** agressive indent
    global mode might be turned off in a later revision. It's kinda obnoxious
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish aggressive-indent
    :init
    (aggressive-indent-global-mode 1))
#+END_SRC
*** avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind
  ("M-s" . avy-goto-char))
#+END_SRC
*** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon
    :init
    (beacon-mode 1))
#+END_SRC
*** bettershell
    experimental
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package better-shell
    :ensure t)
#+END_SRC
*** focus
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package focus
    :ensure t)
#+END_SRC
*** fzf
    this implementation requires either zplug, or some reconfiguration. See my [[https://github.com/fredeeb/dotfiles][dotfiles]] for more info.
#+BEGIN_SRC emacs-lisp
  (use-package fzf
    :ensure t 
    :config
    (evil-leader/set-key "f" 'fzf)
    :custom
    (fzf/executable "~/.zplug/repos/junegunn/fzf/bin/fzf"))
#+END_SRC
*** golden ratio
    #+BEGIN_SRC emacs-lisp
      (use-package golden-ratio
       	:ensure t
       	:diminish golden-ratio
       	:config
       	(golden-ratio-mode 1))
    #+END_SRC
*** Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :diminish hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC
*** ido
#+BEGIN_SRC emacs-lisp
    (use-package ido-vertical-mode
      :ensure t
      :config 
    (ido-vertical-mode))
#+END_SRC
*** lock in
    requires [[https://tizonia.org][tizonia]]
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/elisp/lock-in.el")
#+END_SRC
*** openwith
    requires zathura
#+BEGIN_SRC emacs-lisp
  (use-package openwith
    :ensure t
    :config
    (openwith-mode t)
    :custom
    (openwith-associations '(("\\.pdf\\'" "zathura" (file)))))

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (setq large-file-warning-threshold nil)
#+END_SRC
*** pandoc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pandoc
    :ensure t)
#+END_SRC
*** rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode))
#+END_SRC
*** sudo-edit
    #+BEGIN_SRC emacs-lisp
      (use-package sudo-edit
       	:ensure t)
    #+END_SRC
*** swiper / ivy
    mostly a fallback for things that helm doesn't support
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind (:map evil-normal-state-map
                ("/" . 'swiper-all)))
  (ivy-mode 1)
#+END_SRC
** language packs
   mostly syntax higlighters
*** clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
  (use-package cider
    :ensure t)
  (use-package flycheck-clojure
    :ensure t)
#+END_SRC
*** dts
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dts-mode
    :ensure t)
#+END_SRC
*** lua
    requires [[https://www.lua.org/][lua]]
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC
*** go
    requires [[https://golang.org/][golang]]
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC
*** matlab
    requires [[https://se.mathworks.com/products/matlab.html][matlab]]
#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)
  (add-to-list
   'auto-mode-alist
   '("\\.m\\'" . matlab-mode))
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
#+END_SRC
*** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :custom
    (org-plantuml-jar-path (expand-file-name "/usr/share/plantuml/plantuml.jar"))
    :magic ("@startuml" . plantuml-mode))

  (use-package flycheck-plantuml
    :ensure t)
#+END_SRC
*** textmodes
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package textile-mode
    :ensure t)
#+END_SRC
** programming
*** company / rtags
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company
    :init
    (global-company-mode)
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 2))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package company-irony
    :ensure t)

  (use-package company-irony-c-headers
    :ensure t
    :config
    (add-to-list 'company-backends 'company-irony))

  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))

  (use-package rtags
    :ensure t
    :custom
    (rtags-autostart-diagnostics t)
    (rtags-completions-enabled t)
    :config
    (evil-leader/set-key
      "r f" 'rtags-find-file
      "r g" 'rtags-find-symbol
      "r j" 'next-error
      "r r" 'rtags-find-references-at-point
      "r t" 'rtags-symbol-type))

  (use-package company-rtags
    :ensure t
    :config
    (push 'company-rtags company-backends))

  (use-package flycheck-rtags
    :ensure t)

  (use-package helm-rtags
    :ensure t)

  (use-package cmake-ide
    :ensure t
    :init
    (cmake-ide-setup)
    :config
    (evil-leader/set-key
      "r c" 'cmake-ide-compile
      "r C" 'cmake-ide-run-cmake))

  (add-hook 'c-mode-hook 'rtags-start-process-unless-running)
  (add-hook 'c++-mode-hook 'rtags-start-process-unless-running)


  (defun better-flycheck-rtags-setup ()
    "Configure flycheck-rtags for better experience."
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-check-syntax-automatically nil)
    (setq-local flycheck-highlighting-mode nil))
  (add-hook 'c-mode-hook #'better-flycheck-rtags-setup)
  (add-hook 'c++-mode-hook #'better-flycheck-rtags-setup)
#+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck
    :custom
    (flycheck-global-modes '(not (org-mode c-mode c++-mode))))

  (use-package flycheck-clangcheck
    :ensure t 
    :custom (flycheck-clangcheck-analyze t))
#+END_SRC
*** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package auto-yasnippet
    :ensure t
    :bind
    ("C-c y" . 'aya-create)
    ("C-c u" . 'aya-expand))
#+END_SRC
*** Paredit and friends
#+BEGIN_SRC emacs-lisp
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'clojure-mode-hook          #'enable-paredit-mode)

  (use-package cedit
    :ensure t)
  (use-package evil-paredit
    :ensure t)
#+END_SRC
*** jedi
#+BEGIN_SRC emacs-lisp
(use-package jedi
  :ensure t
  :config
  (jedi:install-server))
#+END_SRC
*** floobits
    See [[https://floobits.com/][floobits.com]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package floobits
    :ensure t)
#+END_SRC
*** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :hook
    (html-mode))

  (use-package emmet-mode
    :ensure t
    :diminish emmet-mode  
    :bind
    ("M-p" . 'emmet-expand-yas))

  (use-package rainbow-mode
    :ensure t
    :diminish rainbow-mode
    :init
    (rainbow-mode 1)
    :hook web-mode)
#+END_SRC
** git stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :config
    (evil-leader/set-key "g s" 'magit-status))
  (use-package evil-magit
    :ensure t)
  (use-package github-clone
    :ensure t)
  (use-package diff-hl
    :ensure t 
    :hook
    (magit-post-refresh-hook . diff-hl-magit-post-refresh)
    :config
    (diff-hl-mode 1)
    (evil-leader/set-key
      "g n" 'diff-hl-next-hunk
      "g p" 'diff-hl-previous-hunk))
#+END_SRC
** ui
*** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    (evil-leader/set-key
      "u" 'helm-imenu)
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x))

  (use-package helm-make
    :ensure t
    :config
    (evil-leader/set-key "c" 'helm-make))

  (use-package helm-company
    :ensure t)
#+END_SRC
*** linum
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package linum-relative
        :ensure t 
        :hook (prog-mode . linum-relative-mode)
        :custom
        (linum-relative-current-symbol ""))
    #+END_SRC
*** neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (evil-leader/set-key "i" 'neotree-project-dir-toggle))

  (defun neotree-project-dir-toggle ()
    "Open NeoTree using the project root, using find-file-in-project,
  or the current buffer directory."
    (interactive)
    (let ((project-dir
           (ignore-errors
             ;;; Pick one: projectile or find-file-in-project
                                          ; (projectile-project-root)
             (ffip-project-root)
             ))
          (file-name (buffer-file-name))
          (neo-smart-open t))
      (if (and (fboundp 'neo-global--window-exists-p)
               (neo-global--window-exists-p))
          (neotree-hide)
        (progn
          (neotree-show)
          (if project-dir
              (neotree-dir project-dir))
          (if file-name
              (neotree-find file-name))))))
#+END_SRC
*** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t)
#+END_SRC
*** lsp ui
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :custom
    (lsp-ui-peek-always-show t)
    :hook (lsp-mode . lsp-ui-mode))
#+END_SRC
*** theme
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ample-zen-theme
    :ensure t
    :config
    (load-theme 'ample-zen t))
  (use-package airline-themes
    :ensure t
    :config
    (load-theme 'airline-behelit t))
#+END_SRC
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key
    :init
    (which-key-mode))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)))
  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)

  (add-hook 'org-mode-hook 'visual-line-mode)
  (use-package org-ref
    :ensure t)
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (load "~/.emacs.d/elisp/org-macros.el")

  (use-package auctex
    :ensure t)
#+END_SRC
