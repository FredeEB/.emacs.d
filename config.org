* introduction
  This is my config. It does just about everything I need it to do, and /a lot/ more than that too.
  I run emacs 28 which is why it's included as a submodule. It has been running rocksolid since forever.
** this is my personal config (DISCLAIMER)
   Just to let you know. If you want to use it, or parts of it, be my guest. All of the configuration is in [[https://github.com/FredeEB/.emacs.d/blob/master/config.org][config.org]]. I've been very sparse with comments, but the headings should be pretty descriptive, however if you're looking for something in there, just =<C-f>=, =<C-s>=, =/= or what ever you do.

   I'm running this config for work with emacs 28.0.50, and thus I cannot guarentee but might work with previous versions without modification, or it might not.

   To use it, just clone this repo to whereever your emacs config is (usually =/home/$(USER)/.emacs.d=) and remember to back up your old one, if you have one. You can then try it with whatever version of Emacs you have installed to see if it works. But as mentioned, it's only been tested with Emacs 28.0.50, meaning you'd have to either build it from source, or fetch a binary from your local software pusher (soure can be found here [[https://git.savannah.gnu.org/git/emacs.git]]).

   Also, I'm /NOT/ responsible for anything that happens to anything that touches these files.
* basics
  Setting up the basics early, so if the config breaks further along, I'll still have evil
  also, setting some code block properties that help.
  #+PROPERTY: header-args :results silent
** package manager
  I use straight for managing packages. It's a very painless process to spin up a new machine, just by downloading the repo and starting up emacs.
  some use-package syntactic suger.
   #+begin_src emacs-lisp :tangle yes
	 (defvar bootstrap-version)
	 (let ((bootstrap-file
			(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
		   (bootstrap-version 5))
	   (unless (file-exists-p bootstrap-file)
		 (with-current-buffer
			 (url-retrieve-synchronously
			  "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
			  'silent 'inhibit-cookies)
		   (goto-char (point-max))
		   (eval-print-last-sexp)))
	   (load bootstrap-file nil 'nomessage))

	 (straight-use-package 'use-package)
   #+end_src
    This allows the use-package syntax while using straight on the backend.
    The first line should be enough to convert a convetional usepackage config to a straight one.
   #+begin_src emacs-lisp :tangle yes
     (setq straight-use-package-by-default t)
   #+end_src
** evil-mode
   Yes, I also came from [neo]vi[m], so ofc evil is gonna be in here.
   These are some nice packages that relate to evil, however there are "evil-*" packages more throughout the file
   #+begin_src emacs-lisp :tangle yes
	 (setq evil-want-integration t
		   evil-want-keybinding nil
		   evil-want-C-i-jump nil)

	 (use-package evil-leader
	   :init
	   (global-evil-leader-mode)
	   (evil-leader/set-leader "<SPC>"))

	 (use-package evil-collection
	   :after evil-leader
	   :custom
	   (evil-collection-company-use-tng nil)
	   :init
	   (evil-collection-init))

	 (use-package evil
	   :after evil-collection
	   :config
	   (evil-mode 1))

	 (use-package evil-paredit)
	 (use-package evil-anzu)
	 (use-package evil-surround
	   :config
	   (global-evil-surround-mode))

	 (use-package evil-owl
	   :custom
	   (evil-owl-display-method 'posframe)
	   (evil-owl-extra-posfram-args '(:width 50 :height 20))
	   (evil-owl-idle-delay 0)
	   :init
	   (evil-owl-mode))

	 (use-package evil-numbers)
	 (use-package evil-matchit)
   #+end_src
** misc
   misc default settings
   #+begin_src emacs-lisp :tangle yes
	 (setq-default scroll-conservatively 100
				   scroll-margin 0
				   inhibit-startup-message t
				   initial-scratch-message ""
				   ring-bell-function 'ignore
				   tab-width 4
				   default-directory (expand-file-name "~/")
				   tramp-default-method "ssh"
				   large-file-warning-threshold nil
				   custom-file (expand-file-name "~/.emacs.d/customs.el")
				   delete-trailing-lines t
				   tramp-smb-conf nil
				   windmove-wrap-around t
                   indent-tabs-mode t
				   c-basic-offset 4)

     (defvaralias 'c-basic-offset 'tab-width)
     (defalias 'yes-or-no-p 'y-or-n-p)
     (defvaralias 'c-basic-offset 'tab-width)

     (global-subword-mode)

     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)

     (setq shell-file-name "bash")
     (setq shell-command-switch "-c")

     ;; environments
     (use-package exec-path-from-shell
       :config (exec-path-from-shell-initialize))

     ;; make tramp play nice
     (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

     ;; File beautification
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Electricity!!
     (add-hook 'prog-mode-hook 'electric-pair-mode)

     ;; environments
     (use-package exec-path-from-shell
	   :config (exec-path-from-shell-initialize))

     ;; make tramp play nice
     (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))

     ;; File beautification
     (setq delete-trailing-lines t)
     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     ;; Electricity!!
     (add-hook 'prog-mode-hook 'electric-pair-mode)

     ;; font
     (add-to-list 'default-frame-alist '(font . "Victor Mono Nerd Font 13"))
   #+end_src
   Ligatures are nice ways of displaying operators
   #+begin_src emacs-lisp :tangle yes
     (setq font-lock-maximum-decoration 3)
	 (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
					(35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
					(36 . ".\\(?:>\\)")
					(37 . ".\\(?:\\(?:%%\\)\\|%\\)")
					(38 . ".\\(?:\\(?:&&\\)\\|&\\)")
					(42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
					(43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
					(45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
					(46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
					(47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
					(48 . ".\\(?:x[a-zA-Z]\\)")
					(58 . ".\\(?:::\\|[:=]\\)")
					(59 . ".\\(?:;;\\|;\\)")
					(60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
					(61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
					(62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
					(63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
					(91 . ".\\(?:]\\)")
					(92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
					(94 . ".\\(?:=\\)")
					(119 . ".\\(?:ww\\)")
					(123 . ".\\(?:-\\)")
					(124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
					(126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
					)
				  ))
	   (dolist (char-regexp alist)
		 (set-char-table-range composition-function-table (car char-regexp)
							   `([,(cdr char-regexp) 0 font-shape-gstring]))))
   #+end_src
** temporary functions
   This is a section for functions that are useful at the moment for projects I'm working on, Meaning that this section is going to change depending on the current work I do
   #+begin_src emacs-lisp :tangle yes
	 (defun esp-init ()
	   (interactive)
	   (let* ((root (vc-root-dir))
			  (idf-tools (concat root "tools"))
			  (adf-path (concat root "esp-adf/"))
			  (idf-path (concat root "esp-idf")))
		 (setenv "IDF_TOOLS_PATH" idf-tools)
		 (setenv "IDF_PATH" idf-path)
		 (setenv "ADF_PATH" adf-path)))
   #+end_src
** helm
   #+begin_src emacs-lisp :tangle yes
	 (use-package helm
	   :init
	   (require 'helm-config)
	   (helm-mode))
	 (use-package helm-company)
	 (use-package helm-projectile)
	 (use-package helm-rg)
	 (use-package helm-swoop)
	 (use-package helm-system-packages
	   :custom
	   (helm-system-packages-pacman-confirm-p nil))
	 (use-package helm-posframe
	   :custom
	   (helm-posframe-poshandler #'posframe-poshandler-frame-center))
   #+end_src
** elfeed
   #+begin_src emacs-lisp :tangle yes
	 (use-package elfeed
	   :custom
	   (elfeed-feeds
		'(
		  ;;dev.to
		  "http://dev.to/feed"

		  ;;reddit
		  "http://reddit.com/r/clojure/.rss"
		  "http://reddit.com/r/cpp/.rss"
		  "http://reddit.com/r/emacs/.rss"
		  "http://reddit.com/r/golang/.rss"
		  "http://reddit.com/r/rust/.rss"
		  "http://reddit.com/r/bindingofisaac/.rss"

		  ;;hackernews
		  "https://news.ycombinator.com/rss"

		  ;;other blogs
		  "https://cestlaz.github.io/rss.xml"
		  )))
   #+end_src
* git
** magit
   magit is the best git client in the multiverse. I use the evil variant.
    #+begin_src emacs-lisp :tangle yes
	  (use-package evil-magit
		:init
		(evil-magit-init)
		:custom
		(magit-repository-directories (expand-file-name "~/git/projects"))
		(magit-module-sections-nested nil))

	  (magit-add-section-hook 'magit-status-sections-hook
							  'magit-insert-modules
							  'magit-insert-unpulled-from-upstream)
    #+end_src

    As well as some other packages that relate
    #+begin_src emacs-lisp :tangle yes
	  (use-package forge)
	  (use-package ssh-agency)
	  (use-package orgit)
    #+end_src

    Tools for more git integration. Git timemachine let's you check the git log in the buffer and is extremely useful
    git gutter are the plus and minus signs that show you what's added/removed/changed on the left
    #+begin_src emacs-lisp :tangle yes
	  (use-package git-timemachine)
	  (use-package git-gutter-fringe+
		:config
		(global-git-gutter+-mode)
		(git-gutter-fr+-minimal))
    #+end_src
** dired
   #+begin_src emacs-lisp :tangle yes
     (use-package dired-git-info)
   #+end_src
* qol
  Quality of life packages. many require external software. Look at each package for dependecies
** engine
   used to search web resources.
   #+begin_src emacs-lisp :tangle yes
	 (use-package engine-mode
	   :config
	   (defengine cppreference
		 "https://en.cppreference.com/mwiki/index.php?search=%s")
	   (defengine cmake
		 "https://cmake.org/cmake/help/latest/search.html?q=%s&check_keywords=yes&area=default")
	   (defengine google
		 "https://google.com/search?q=%s")
	   (defengine youtube
		 "https://www.youtube.com/results?search_query=%s")
	   (defengine dockerhub
		 "https://hub.docker.com/search?q=%s&type=image")
	   (defengine github
		 "https://github.com/search?q=%s")
	   (defengine rustdoc
		 "https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html?search=%s")
	   (defengine wikipedia
		 "https://en.wikipedia.org/wiki/%s"))
   #+end_src
** utilities
   #+begin_src emacs-lisp :tangle yes
	 (use-package sudo-edit)
   #+end_src
** kubernetes
   #+begin_src emacs-lisp :tangle yes
	 (use-package kubel-evil)
   #+end_src
** docker
   #+begin_src emacs-lisp :tangle yes
	 (use-package docker)
	 (use-package dockerfile-mode)
	 (use-package docker-tramp
	   :config (add-to-list 'tramp-remote-path 'tramp-own-remote-path))
   #+end_src
** openwith
   requires zathura for pdf reading. sxiv for image viewing (not all formats are tested).
   #+begin_src emacs-lisp :tangle yes
	 (use-package openwith
	   :config
	   (openwith-mode t)
	   :custom
	   (openwith-associations
		'(("\\.pdf\\'" "evince" (file))
		  ("\\.jpg\\'" "sxiv" (file))
		  ("\\.svg\\'" "sxiv" (file))
		  ("\\.jpeg\\'" "sxiv" (file))
		  ("\\.bmp\\'" "sxiv" (file))
		  ("\\.png\\'" "sxiv" (file))
		  ("\\.flac\\'" "mpv" (file))
		  ("\\.mkv\\'" "mpv" (file))
		  ("\\.wav\\'" "mpv" (file))
		  ("\\.mp3\\'" "mpv" (file))
		  ("\\.mp4\\'" "mpv" (file)))))
   #+end_src
** vterm
   #+begin_src emacs-lisp :tangle yes
	 (use-package vterm-toggle
	   :custom (vterm-shell "zsh"))
   #+end_src
** compilation
   #+begin_src emacs-lisp :tangle yes
	 (setq compilation-scroll-output t
		   compilation-window-height 20)

	 (require 'ansi-color)
	 (defun colorize-compilation ()
	   "Colorize from `compilation-filter-start' to `point'."
	   (let ((inhibit-read-only t))
		 (ansi-color-apply-on-region
		  compilation-filter-start (point))))

	 (add-hook 'compilation-filter-hook
			   #'colorize-compilation)

	 ;; C++
	 (defun compile-c++-things (arg)
	   (interactive "p")
	   (if-let* ((root (vc-root-dir))
				 (cmake (concat root "/CMakeLists.txt"))
				 (build (concat root "/build")))
		   (call-process "cmake" nil nil nil "-S" root "-B" build "-GNinja")
		 (message "Not in a repository"))
	   (helm-make-projectile (string-to-number (first (process-lines "nproc")))))
   #+end_src
* org stuff
** journals
   I've created a personal journal system that creates a new journal entry in =journal-dir= every day. This file is the default target for org agenda entries created with =M-x org-capture t= and =M-x org-capture n= for TODO items under TODAY and miscellaneous notes under the NOTES header, respectively.

  Issues with questions or bugs and PR's are welcome, but I only fix/merge things i feel improves my workflow.

   #+begin_src emacs-lisp :tangle yes
	 (defvar journal-dir
	   (expand-file-name"~/journals/"))

	 (defvar journal
	   (format "%sjournal%s.org"
			   journal-dir
			   (format-time-string "%Y%m%d")))

	 (setq initial-buffer-choice journal
		   org-agenda-files (directory-files journal-dir t "^journal[0-9]+\.org$"))

	 (defvar org-journal-template
	   (concat
		"#+TITLE: Journal\n"
		"#+DATE: " (format-time-string "%A %d/%m/%Y\n")
		"* TODAY\n"
		"* NOTES"))

	 (when (not (file-exists-p journal))
	   (write-region org-journal-template nil journal))

	 (defun find-journal (days-ago)
	   "Find journal from DAYS-AGO"
	   (interactive "p")
	   (if (not current-prefix-arg)
		   (find-file
			journal)
		 (find-file
		  (concat
		   journal-dir
		   "journal"
		   (format-time-string
			"%Y%m%d"
			(seconds-to-time (- (time-to-seconds) (* days-ago 86400))))
		   ".org"))))
   #+end_src

   Setting org todo keyword and agenda templates
   #+begin_src emacs-lisp :tangle yes
	 (setq org-todo-keywords
		   '((sequence "TODO(t)" "DOING(p)" "|" "DONE(d)" "|" "NOT FINISHED(n)"))
		   org-columns-default-format
		   "%25ITEM %TODO %DEADLINE %EFFORT %TAGS"
		   org-capture-templates
		   '(("t" "Todo" entry (file+headline journal "TODAY")
			  "** TODO %?\n")
			 ("n" "Note" entry (file+headline journal "NOTES")
			  "** %?\n\n")))
   #+end_src
** jupyter
   #+begin_src emacs-lisp :tangle yes
	 (use-package ein
	   :custom (ein:output-area-inlined-images t))
	 (use-package elpy)
   #+end_src
** export
   settings and packages for exportng to different formats
   #+begin_src emacs-lisp :tangle yes
     (use-package ox-reveal)

	 (setq org-src-fontify-natively t)

	 (setq org-latex-listings 'minted
		   org-latex-packages-alist '(("" "minted") ("AUTO" "babel"))
		   org-latex-pdf-process
		   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
			 "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
		   org-export-latex-listings 'minted org-src-fontify-natively t)
   #+end_src
** sourceblocks
   Modes and settings for org source blocks
   #+begin_src emacs-lisp :tangle yes
     (use-package ob-async)
	 (use-package ob-rust)
	 (use-package ob-sagemath
	   :custom (org-babel-default-header-args:sage '((:session . t)
													 (:results . "output")))
	   )
	 (require 'org-tempo)
	 (setq org-confirm-babel-evaluate nil
		   org-startup-with-inline-images t
		   org-startup-with-latex-preview t
		   org-export-babel-evaluate nil)

	 (org-babel-do-load-languages 'org-babel-load-languages
								  '((C . t)
									(calc . t)
									(clojure . t)
									(emacs-lisp . t)
									(ein . t)
									(js . t)
									(makefile . t)
									(matlab . t)
									(plantuml . t)
									(python . t)
									(rust . t)
									(shell . t)
									(sagemath . t)))
   #+end_src
** tables
   Functions for tables
   #+begin_src emacs-lisp :tangle yes
	 (defmath uconvert (v u)
	   "Convert value V into compatible unit U"
	   (math-convert-units v u))
   #+end_src
** misc
   pretty things
   #+begin_src emacs-lisp :tangle yes
     (add-hook 'org-mode-hook 'visual-line-mode)
     (add-hook 'markdown-mode-hook 'visual-line-mode)

	 (use-package org-bullets
	   :config
	   (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src
** flyspell
   #+begin_src emacs-lisp :tangle yes
	 (use-package helm-flyspell)
	 (add-hook 'org-mode-hook 'flyspell-mode)
	 (add-hook 'markdown-mode-hook 'flyspell-mode)
   #+end_src
** org-extras
   A set of macros to include Revealjs headers, latex headers, latex meta data and so on
   #+begin_src emacs-lisp :tangle yes
	 (defun export-and-find ()
	   (interactive)
	   (org-latex-export-to-pdf)
	   (when (not (process-status "openwith-process"))
		 (find-file
		  (format "%s.pdf" (file-name-base (buffer-name))))))

	 (defun org-latex-include-header (packages)
	   "Add a latex header with PACKAGES to the current document."
	   (interactive
		(list (split-string (read-string "Package(s): "))))
	   (save-excursion
		 (if (not (search-backward "#+LATEX_HEADER: \\usepackage" nil t))
			 (if (not (search-backward "#+AUTHOR:" nil t))
				 (goto-char 0)))
		 (forward-line)
		 (dolist (package packages)
		   (insert (concat "#+LATEX_HEADER: \\usepackage{" package "}\n")))))

	 (defun org-latex-insert-meta (title author)
	   "Insert TITLE and AUTHOR headers for latex."
	   (interactive "sTitle: \nsAuthor: ")
	   (save-excursion
		 (goto-char (point-min))
		 (insert "#+TITLE: " title "\n#+AUTHOR: " author "\n#+DATE:" (shell-command-to-string "date \"+%d/%m/%Y\"") "\n")))

	 (defun org-reveal-add-root ()
	   "Insert Reveal root tag for org-re-reveal exports"
	   (interactive)
	   (save-excursion
		 (goto-char (point-min))
		 (insert
		  (format
		   "#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/%s/\n"
		   (cdr
			(assoc 'version
				   (with-current-buffer
					   (url-retrieve-synchronously
						"https://api.cdnjs.com/libraries/reveal.js")
					 (goto-char (+ url-http-end-of-headers 1))
					 (json-read-object))))))))

	 (defun org-macros-src-block-add-name (name)
	   "Add a NAME to the current sourceblock."
	   (interactive "sName: ")
	   (save-excursion
		 (if (not (search-backward "#+begin_src" nil t))
			 (message "Src block not found"))
		 (newline)
		 (forward-line -1)
		 (insert (concat "#+NAME: " name))))
#+end_src
* programming
** meta
   company completes anything and it works wonderfully
   #+begin_src emacs-lisp :tangle yes
	 (use-package company
	   :hook (prog-mode . company-mode)
	   :custom
	   (company-idle-delay 0)
	   (company-minimum-prefix-length 1)
	   (company-tooltip-align-annotations t)
	   (company-tooltip-limit 14)
	   (company-idle-delay 0)
	   (company-echo-delay (if (display-graphic-p) nil 0))
	   (company-minimum-prefix-length 2)
	   (company-require-match 'never)
	   (company-global-modes '(not erc-mode message-mode help-mode gud-mode eshell-mode shell-mode))
	   (company-backends '(company-capf)))

	 (use-package company-posframe
	   :config
	   (company-posframe-mode)
	   :custom
	   (company-posframe-quickhelp-delay nil))
   #+end_src

   Debugging, for when my code doesn't work
   #+begin_src emacs-lisp :tangle yes
	 (use-package realgud)
	 (use-package realgud-lldb)
   #+end_src
** lsp
   #+begin_src emacs-lisp :tangle yes
	 (use-package lsp-mode
	   :hook
	   ((c++-mode c-mode rust-mode go-mode csharp-mode python-mode cmake-mode) . lsp)
	   :custom
	   (lsp-diagnostic-package :flymake)
	   (lsp-prefer-capf t)
	   (read-process-output-max (* 1024 1024))
	   (lsp-rust-server 'rust-analyzer))
	 (use-package lsp-ui
	   :custom
	   (lsp-ui-doc-max-width 80)
	   (lsp-ui-doc-position 'top))
	 (use-package helm-lsp)
	 (use-package dap-mode)
	 (use-package lsp-treemacs)
	 (use-package dap-mode
	   :config
	   (require 'dap-gdb-lldb)
	   (require 'dap-go)
	   ;;download debuggers, REQUIRES unzip
	   (dap-gdb-lldb-setup)
	   (dap-go-setup))

	 (lsp-register-client
	  (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
					   :major-modes '(c/c++-mode)
					   :remote? t
					   :server-id 'clangd-remote))

	 (defun clang-ide ()
	   (interactive)
	   (treemacs)
	   (lsp-treemacs-symbols)
	   (lsp-treemacs-errors-list))
   #+end_src
** lisp
   All the lispy things
   #+begin_src emacs-lisp :tangle yes
	 (add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)
	 (add-hook 'lisp-mode-hook 'evil-paredit-mode)
	 (add-hook 'clojure-mode-hook 'evil-paredit-mode)
	 (add-hook 'clojurescript-mode-hook 'evil-paredit-mode)

	 ;; elisp
	 (use-package elsa)
	 (use-package eros
	   :hook (eros-mode . emacs-lisp-mode))

	 ;; clojure
	 (use-package clojure-mode)
	 (use-package cider
	   :custom
	   (cider-lein-parameters "repl :headless :host localhost")
	   :hook (cider-enlighten-mode . cider-mode))

	 (setq nrepl-use-ssh-fallback-for-remote-hosts t)

	 (use-package flycheck-clojure)
	 (use-package helm-clojuredocs)
	 (use-package cljr-helm)

	 ;; racket
	 (use-package racket-mode)

	 (use-package slime
	   :custom
	   (inferior-lisp-program "sbcl"))
   #+end_src
** python
   #+begin_src emacs-lisp :tangle yes
	 (use-package pipenv
	   :hook (python-mode . pipenv-mode)
	   :custom
	   (pipenv-projectile-after-switch-function #'pipenv-projectile-after-switch-extended))

	 (use-package jedi)
   #+end_src
** c++
   this is what I use most in this configuration
   #+begin_src emacs-lisp :tangle yes
	 (c-set-offset 'substatement-open 0)
	 (c-set-offset 'innamespace 0)
	 (c-set-offset 'brace-list-open 0)
	 (setq c-basic-offset 4)

	 (use-package clang-format)
	 (use-package modern-cpp-font-lock
	   :config
	   (modern-c++-font-lock-global-mode))
	 (use-package flycheck-clang-tidy
	   :after flycheck
	   :hook
	   (flycheck-mode . flycheck-clang-tidy-setup)
	   :custom
	   (flycheck-clang-language-standard "c++17"))

	 (use-package rmsbolt
	   :mode ((c++-mode c-mode go-mode rust-mode) . rmsbolt-mode))

	 (use-package cmake-mode)
	 (use-package helm-ctest)
	 (use-package helm-make
	   :custom
	   (helm-make-build-dir "build"))
   #+end_src
** rust
   #+begin_src emacs-lisp :tangle yes
	 (use-package cargo
	   :hook (rust-mode . cargo-minor-mode))
	 (use-package toml-mode)
   #+end_src
** haskell
   #+begin_src emacs-lisp :tangle yes
     (use-package haskell-mode)
   #+end_src
** go
   #+begin_src emacs-lisp :tangle yes
	 (use-package go-mode
	   :config
	   (push (expand-file-name "~/go/bin") exec-path))

	 (defun go-run ()
	   (interactive)
	   (save-buffer)
	   (let ((buffer "*go*"))
		 (start-process "*go*" buffer "go" "run" (buffer-name))
		 (switch-to-buffer buffer)
		 (view-mode)))
   #+end_src
** web
   #+begin_src emacs-lisp :tangle yes
	 ;; everything in one package
	 (use-package web-mode
	   :mode
	   ("\\.js\\'" . web-mode)
	   ("\\.ts\\'" . web-mode)
	   ("\\.css\\'" . web-mode)
	   ("\\.jsx\\'" . web-mode)
	   ("\\.tsx\\'" . web-mode)
	   ("\\.html\\'" . web-mode)
	   ("\\.scss\\'" . web-mode)
	   ("\\.cshtml\\'" . web-mode))

	 (use-package npm-mode)
	 (use-package impatient-mode)
	 (use-package lorem-ipsum)
	 (use-package emmet-mode
	   :custom
	   (emmet-expand-jsx-className t))

	 (use-package restclient)
	 (use-package ob-restclient)
#+end_src
** yasnippet
   All the snippets! (or atleast most of them)
   #+begin_src emacs-lisp :tangle yes
	 (use-package yasnippet-snippets)
	 (use-package react-snippets)

	 (use-package yasnippet
	   :init
	   (yas-global-mode 1))

	 (use-package auto-yasnippet)
   #+end_src
** octave
   #+begin_src emacs-lisp :tangle yes
	 (use-package octave
	   :mode ("\\.m\\'" . octave-mode))
   #+end_src
** csharp
   #+begin_src emacs-lisp :tangle yes
	 (use-package csharp-mode)
   #+end_src
** plant
   requires [[https://plantuml.com][plantuml]]
   #+begin_src emacs-lisp :tangle yes
	 (use-package plantuml-mode
	   :magic ("@startuml" . plantuml-mode))

	 (when (executable-find "plantuml")
	   (setq plantuml-jar-path (expand-file-name (executable-find "plantuml"))
			 org-plantuml-jar-path
			 (replace-regexp-in-string
			  "bin"
			  "share/java/plantuml"
			  (format "%s%s" (expand-file-name (executable-find "plantuml")) ".jar"))))

	 (use-package flycheck-plantuml)

	 ;; recompiles plantuml diagrams on save
	 (defun recompile-plantuml ()
	   (add-hook 'after-save-hook
				 (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))

	 (add-hook 'plantuml-mode-hook 'recompile-plantuml)
   #+end_src
** others
   #+begin_src emacs-lisp :tangle yes
	 (use-package yaml-mode)
	 (use-package json-mode)
	 (use-package protobuf-mode)
	 ;; (use-package gnuplot)
   #+end_src
* misc
** shell
   insert stdout from terminal (try "Q" on the next line)
   seq 0 255 | xargs printf "%.2x\n" | fmt -w 49
   #+begin_src emacs-lisp :tangle yes
	 (defun insert-output-of-executed-line ()
	   "executes line at point in default shell and inserts stdout"
	   (interactive)
	   (insert
		(shell-command-to-string
		 (delete-and-extract-region
		  (point-at-bol)
		  (point-at-eol)))))
   #+end_src
** calctex
   #+begin_src emacs-lisp :tangle yes
     (straight-use-package '(calctex :type git :repo "https://github.com/johnbcoughlin/calctex"))
     (add-hook 'calc-mode-hook 'calctex-mode)
   #+end_src
** functions
   #+begin_src emacs-lisp :tangle yes
	 (use-package evil-avy
	   :mode (prog-mode . evil-avy-mode))
   #+end_src
* ui
** theme
   #+begin_src emacs-lisp :tangle yes
	 (use-package doom-themes
	   :init
	   (load-theme 'doom-dracula t)
	   :config
	   (custom-set-faces
		'(button ((t (:inherit link :foreground "#ffb86c" :underline nil))))
		'(font-lock-comment-face ((t (:foreground "#6272a4" :slant italic))))
		'(font-lock-preprocessor-face ((t (:inherit nil :foreground "#bd93f9"))))
		'(variable-pitch ((t (:family "Fira Sans"))))))

	 (use-package doom-modeline
	   :hook (after-init . doom-modeline-init)
	   :custom
	   (doom-modeline-buffer-file-name-style 'relative-from-project)
	   (doom-modeline-height 35)
	   (doom-modeline-bar-width 4)
	   (doom-modeline-icon t)
	   (doom-modeline-major-mode-icon t)
	   (doom-modeline-major-mode-color-icon nil))

	 (use-package solaire-mode
	   :config
	   (solaire-global-mode))

	 (use-package rainbow-delimiters)
   #+end_src
** which key
   #+begin_src emacs-lisp :tangle yes
	 (use-package which-key
	   :init
	   (which-key-mode))
   #+end_src
** treemacs
   #+begin_src emacs-lisp :tangle yes
	 (use-package treemacs-evil)
   #+end_src
** focus
   #+begin_src emacs-lisp :tangle yes
	 (use-package focus)
   #+end_src
* hotkeys
  #+begin_src emacs-lisp :tangle yes
	;; Leader keys
	(evil-leader/set-key
	  ;;buffers & windows
	  "b" 'helm-buffers-list
	  "o" 'other-window
	  "q" 'kill-buffer-and-window

	  ;;misc
	  "a" 'comment-dwim
	  "i" 'indent-region

	  ;;buffer
	  "j" 'evil-avy-goto-char
	  "e" 'ediff-buffers

	  ;;files
	  "f f" 'treemacs
	  "f d" 'dired-jump
	  "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
	  "f i" '(lambda () (interactive) (find-file "~/.config/i3/config"))
	  "f z" '(lambda () (interactive) (find-file "~/.zshrc"))
	  "f t" '(lambda () (interactive) (find-file "~/git/tools.org"))
	  "f p" '(lambda () (interactive) (find-file (expand-file-name "~/git/")))
	  "f u" '(lambda () (interactive) (find-file (expand-file-name "~/uni/")))
	  "f h" '(lambda () (interactive) (find-file (expand-file-name "~/")))
	  "f d" 'dired-jump
	  "f j" 'find-journal

	  ;;config reload
	  "f r" '(lambda () (interactive) (load-file (expand-file-name "init.el" user-emacs-directory)))

	  ;;Git
	  "g s" 'magit-status
	  "g t" 'git-timemachine
	  "g f" 'global-git-gutter+-mode
	  "g g" 'git-gutter+-show-hunk-inline-at-point
	  "g r" 'git-gutter+-revert-hunk
	  "g m" 'magit-blame-addition

	  ;;Kubernetes
	  "g k" 'kubel

	  ;;elfeed
	  "n" 'elfeed

	  "m" 'helm-mini

	  ;;lsp
	  "r d" 'lsp-ui-peek-find-definitions
	  "r e" 'lsp-execute-code-action
	  "r o" 'lsp-rename
	  "r r" 'lsp-ui-peek-find-references
	  "r s" 'helm-lsp-workspace-symbol

	  ;;dap
	  "d r" 'dap-debug-restart
	  "d l" 'dap-debug-last
	  "d f" 'dap-debug-recent
	  "d d" 'dap-debug
	  "d t" 'dap-debug-edit-template
	  "d h" '(lambda () (interactive) (dap-ui-mode t) (dap-hydra))

	  ;;compile
	  "c" 'helm-make-projectile

	  ;;Docker
	  "g d" 'docker
	  "g c" 'docker-compose

	  ;;ispell
	  "z" 'helm-flyspell-correct

	  ;;utilities
	  "y" 'helm-system-packages
	  "+" 'calc
	  "-" 'mu4e
	  "<return>" '(lambda () (interactive) (split-window-sensibly) (other-window 1) (vterm))

	  ;;projectile
	  "p p" 'helm-projectile
	  "p f" 'helm-projectile-find-file-dwim
	  "p a" 'helm-projectile-rg
	  "p s" 'projectile-add-known-project
	  "p c" 'projectile-compile-project
	  "v m" '(lambda () (interactive) (find-file "./CMakeLists.txt"))
	  "v d" '(lambda () (interactive) (find-file "./Dockerfile"))
	  "v c" '(lambda () (interactive) (find-file "./docker-compose.yml"))
	  "v p" '(lambda () (interactive) (find-file "./Pipfile"))

	  ;;engine
	  "s c" 'engine/search-cppreference
	  "s b" 'engine/search-cmake
	  "s y" 'engine/search-youtube
	  "s d" 'engine/search-dockerhub
	  "s r" 'engine/search-rustdoc
	  "s w" 'engine/search-wikipedia
	  "s g i" 'engine/search-github
	  "s g o" 'engine/search-google

	  ;; window management
	  "w w" 'tear-off-window
	  "w h" 'windmove-swap-states-left
	  "w j" 'windmove-swap-states-down
	  "w k" 'windmove-swap-states-up
	  "w l" 'windmove-swap-states-right)

	(evil-leader/set-key-for-mode 'cider-mode
	  "r h" 'cljr-helm
	  "r r" 'cider-eval-last-sexp
	  "r k" 'cider-eval-buffer
	  "r d" 'helm-clojuredocs
	  "e" 'cider-eval-last-sexp
	  "k" 'cider-eval-buffer)

	(evil-leader/set-key-for-mode 'dired-mode
	  "d i" '(lambda () (interactive) (start-process "sxiv" "*sxiv*" "sxiv" (dired-filename-at-point)))
	  "d g" 'dired-git-info-mode
	  "Y" 'dired-copy-filename-as-kill nil)

	(evil-leader/set-key-for-mode 'emacs-lisp-mode
	  "e" 'eval-last-sexp
	  "k" 'eval-buffer)

	(evil-leader/set-key-for-mode 'c++-mode
	  "u" 'clang-ide
	  "c" 'compile-c++-things)

	(setq local-function-key-map (delq '(kp-tab . [9]) local-function-key-map))
	;;global state
	(evil-define-key nil global-map
	  (kbd "C-x C-f") 'helm-find-files
	  (kbd "C-x C-b") 'helm-buffers-list
	  (kbd "M-x") 'helm-M-x
	  (kbd "M-p") 'emmet-expand-yas
	  (kbd "C-S-c") 'aya-create
	  (kbd "C-S-e") 'aya-expand
	  (kbd "C-s") 'save-buffer
	  (kbd "C-c l") 'org-store-link
	  (kbd "C-c a") 'org-todo-list
	  (kbd "C-k") 'kill-buffer-and-window
	  (kbd "C-c c") 'org-capture)

	(evil-define-key nil org-mode-map
	  (kbd "M-H") 'org-shiftleft
	  (kbd "M-J") 'org-shiftdown
	  (kbd "M-K") 'org-shiftup
	  (kbd "M-L") 'org-shiftright
	  (kbd "M-h") 'org-metaleft
	  (kbd "M-j") 'org-metadown
	  (kbd "M-k") 'org-metaup
	  (kbd "M-l") 'org-metaright)

	(evil-define-key 'normal iedit-mode-keymap
	  (kbd "t") 'iedit-toggle-selection
	  (kbd "f") 'iedit-restrict-function)

	(evil-define-key 'normal dired-mode-map
	  (kbd "Y") '(lambda () (interactive) (dired-copy-filename-as-kill 0))
	  (kbd "y") 'dired-copy-filename-as-kill)

	(evil-define-key nil go-mode-map
	  (kbd "C-c C-c") 'go-run)

	(evil-define-key 'normal global-map
	  (kbd "Q") 'insert-output-of-executed-line)

	(evil-define-key 'visual global-map
	  (kbd "S") 'evil-surround-region)

	;; paredit mode
	(evil-define-key nil paredit-mode-map
	  (kbd "M-l") 'paredit-forward-slurp-sexp
	  (kbd "M-h") 'paredit-backward-slurp-sexp
	  (kbd "M-L") 'paredit-backward-barf-sexp
	  (kbd "M-H") 'paredit-forward-barf-sexp)

	(evil-define-key nil cider-repl-mode-map
	  (kbd "C-k") 'cider-repl-backward-input
	  (kbd "C-j") 'cider-repl-forward-input)

	(evil-define-key 'normal global-map
	  (kbd "U") 'helm-multi-swoop-projectile)
  #+end_src
