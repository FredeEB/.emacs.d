* Basics
** init
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; Bootstrap quelpa
   (if (require 'quelpa nil t)
       (quelpa-self-upgrade)
     (with-temp-buffer
       (url-insert-file-contents "https://framagit.org/steckerhalter/quelpa/raw/master/bootstrap.el")
       (eval-buffer)))

   (setq use-pacakge-ensure-function 'quelpa)
   (setq use-package-always-ensure t)

   (require 'package)
   (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)

   ;; Install quelpa-use-package, which will install use-package as well
   (quelpa
    '(quelpa-use-package
      :fetcher git
      :url "https://framagit.org/steckerhalter/quelpa-use-package.git"))
   (require 'quelpa-use-package)
   #+END_SRC
** Basics
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq scroll-conservatively 100
	 scroll-margin 5
	 inhibit-startup-message t
	 initial-scratch-message ""
	 ring-bell-function 'ignore
	 tab-width 2
	 display-line-numbers-current-absolute t
	 default-directory (expand-file-name "~/")
	 tramp-default-method "ssh"
	 large-file-warning-threshold nil
	 subword-mode t)

   ;; sane normal keybinds
   (global-set-key (kbd "C-s") 'save-buffer)
   (defalias 'yes-or-no-p 'y-or-n-p)
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   (global-display-line-numbers-mode)
   (setq standard-indent 2)

   ;; Load zshrc
   (setq shell-file-name "sh")
   (setq shell-command-switch "-c")

   ;; File beautification
   (setq delete-trailing-lines t)
   (add-hook 'before-save-hook 'delete-trailing-whitespace)

   ;; Electricity!!
   (add-hook 'prog-mode-hook 'electric-pair-mode)

   ;;tmp stuff
   (defalias 'sesman-linked-sessions 'sesman--linked-sessions)

   ;;extra utilities
   (load-file (expand-file-name "~/.emacs.d/elisp/utilties.el"))
   (load-file (expand-file-name "~/.emacs.d/elisp/lock-in.el"))

   ;;latex stuff
   (setq org-latex-listings 'minted
	 org-latex-packages-alist '(("" "minted"))
	 org-latex-pdf-process
	 '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	   "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
	 org-export-latex-listings 'minted org-src-fontify-natively t)

   ;; font
   (add-to-list 'default-frame-alist '(font . "Fira Code-12"))

   (use-package cask :quelpa t)
   #+END_SRC
** evil-mode
   #+BEGIN_SRC emacs-lisp :tangle yes
   (setq evil-want-integration t
	 evil-want-keybinding nil)

   (use-package evil-leader
     :quelpa t
     :init
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>"))

   (use-package evil-collection
     :quelpa t
     :after evil-leader
     :custom
     (evil-collection-company-use-tng nil)
     :init
     (evil-collection-init))

   (use-package evil
     :quelpa t
     :after evil-collection
     :config
     (evil-mode 1))

   (use-package evil-paredit :quelpa t)
   (use-package evil-anzu :quelpa t)
   (use-package evil-surround :quelpa t
     :config
     (evil-surround-mode))
   #+END_SRC
** git
   Magit setup.
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package evil-magit
      :quelpa t
      :custom
      (magit-repository-directories (expand-file-name "~/git/projects")))

    (use-package forge :quelpa t)
    (use-package ssh-agency :quelpa t)

    (setenv "SSH_ASKPASS" "git-gui--askpass")
    #+END_SRC

    Tools for more git integration
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package git-timemachine :quelpa t)
    (use-package git-gutter-fringe+ :quelpa t
      :config
      (git-gutter+-mode))
    #+END_SRC
***  Extra sauce!

    #+BEGIN_SRC emacs-lisp :tangle yes
    (load-file (expand-file-name "~/.emacs.d/elisp/git-extras.el"))
    #+END_SRC
** file management
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package ranger :quelpa t)
   (use-package treemacs-evil :quelpa t)
   (use-package ag :quelpa t)
   (use-package helm-ag :quelpa t)
 #+END_SRC
* qol
  Quality of life packages. many require external software. Look at each package for dependecies
** agressive indent
   #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package aggressive-indent
    :quelpa t
)
   #+END_SRC
** avy
    #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package avy
      :quelpa t)
#+END_SRC
** engine
   used to search web resources.
   #+BEGIN_SRC emacs-lisp :tangle yes
(use-package engine-mode
  :quelpa t
  :config
  (defengine cppreference
    "https://en.cppreference.com/mwiki/index.php?search=%s")
  (defengine google
    "https://google.com/search?q=%s")
  (defengine youtube
    "https://www.youtube.com/results?search_query=%s")
  (defengine dockerhub
    "https://hub.docker.com/search?q=%s&type=image")
  (defengine github
    "https://github.com/search?q=%s")
  (defengine rustdoc
    "https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html?search=%s")
  (defengine wikipedia
    "https://en.wikipedia.org/wiki/%s")
  ;; evil keybindings for search eninges
  (evil-leader/set-key
    "s c" 'engine/search-cppreference
    "s y" 'engine/search-youtube
    "s d" 'engine/search-dockerhub
    "s r" 'engine/search-rustdoc
    "s w" 'engine/search-wikipedia
    "s g i" 'engine/search-github
    "s g o" 'engine/search-google))
   #+END_SRC
** fzf
    this implementation requires either zplug, or some reconfiguration. See my [[https://github.com/fredeeb/dotfiles][dotfiles]] for more info.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package fzf
    :quelpa t
    :custom
    (fzf/executable "~/.zplug/repos/junegunn/fzf-bin/fzf-bin"))
#+END_SRC
** howdoi
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package howdoi
      :quelpa t
     :config
     (evil-leader/set-key
       "h" 'howdoi-query-insert-code-snippet-at-point))
   #+END_SRC
** Hungry delete
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package hungry-delete
    :quelpa t
    :config (global-hungry-delete-mode))
#+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit
  :quelpa t
  :config
  (evil-leader/set-key
    "m" 'iedit-mode))

(defun iedit-then-hydra ()
  (interactive)
  (iedit-mode)
  (hydra-iedit-menu/body))
#+END_SRC
** kubernetes
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package kubernetes
     :quelpa t)
   #+END_SRC
** openwith
    requires zathura for pdf reading. sxiv for image viewing (not all formats are tested).
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package openwith
    :quelpa t
    :config
    (openwith-mode t)
    :custom
    (openwith-associations
     '(("\\.pdf\\'" "zathura" (file))
       ("\\.jpg\\'" "sxiv" (file))
       ("\\.svg\\'" "sxiv" (file))
       ("\\.jpeg\\'" "sxiv" (file))
       ("\\.bmp\\'" "sxiv" (file))
       ("\\.flac\\'" "mpv" (file))
       ("\\.mkv\\'" "mpv" (file))
       ("\\.mp3\\'" "mpv" (file))
       ("\\.mp4\\'" "mpv" (file)))))
#+END_SRC
** request
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package request
     :quelpa t)
   #+END_SRC
** sudo-edit
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package sudo-edit
  :quelpa t)
#+END_SRC
* language packs
  mostly syntax higlighters
** matlab
   requires [[https://se.mathworks.com/products/matlab.html][matlab]]
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package matlab-mode
     :quelpa t
     :hook 'matlab-shell
     :mode ("\\.m\\'" . matlab-mode)
     :config
     (matlab-cedet-setup)
     :custom
   (matlab-indent-function t)
   (matlab-shell-command "matlab"))
   #+END_SRC
** docker
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package docker
     :quelpa t
     :ensure t)

   (use-package dockerfile-mode
     :quelpa t
     :ensure t)
   #+END_SRC
** csharp
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package csharp-mode
      :quelpa t)

   (use-package omnisharp
      :quelpa t
     :after company
     :config
     (add-hook 'csharp-mode-hook 'omnisharp-mode)
     (add-to-list 'company-backends 'company-omnisharp))
   #+END_SRC
** plant
    requires [[https://plantuml.com][plantuml]]
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package plantuml-mode
    :quelpa t
    :custom
    (plantuml-jar-path (expand-file-name (executable-find "plantuml")))
    (org-plantuml-jar-path
     (replace-regexp-in-string
      "bin"
      "lib"
      (format "%s%s" (expand-file-name (executable-find "plantuml")) ".jar")))
    :magic ("@startuml" . plantuml-mode))

  (use-package flycheck-plantuml
    :quelpa t)

  ;; recompiles plantuml diagrams on save
  (defun recompile-plantuml ()
    (add-hook 'after-save-hook
	      (lambda () (call-process "plantuml" nil nil nil (buffer-name)))))

  (add-hook 'plantuml-mode-hook 'recompile-plantuml)
#+END_SRC
** textile
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package textile-mode
    :quelpa t
    :hook '(textile-mode . visual-line-mode)
    :mode ("\\.textile\\'"))
#+END_SRC
** org stuff
#+BEGIN_SRC emacs-lisp :tangle yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (C . T)
     (clojure . T)
     (plantuml . t)
     (shell . t)
     (python .t)
     (makefile . t)
     (calc . t)
     (matlab . t)
     (emacs-lisp . t)
     (js . t)))


  ;;oxes
  (use-package ox-jira :ensure t :quelpa t)
  (use-package ox-html5slide :ensure t :quelpa t)
  (use-package org-re-reveal :ensure t :quelpa t)
  (use-package ox-textile :ensure t :quelpa t)
  (add-to-list 'org-export-backends 'groff)

  ;; agenda and stuff
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "WAITING(@/!)" "|" "DONE(d!)")))

  (add-hook 'org-mode-hook 'visual-line-mode)
  (use-package org-ref
    :quelpa t)

  (use-package org-bullets
    :quelpa t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-export-latex-listings 'minted)
  (setq org-src-fontify-natively t)

  (use-package org-tree-slide :quelpa t)

  (use-package org-gcal
    :quelpa t
    :custom
    (org-gcal-client-id (shell-command-to-string "pass Org/gcal/client"))
    (org-gcal-client-secret (shell-command-to-string "pass Org/gcal/secret"))
    (org-gcal-file-alist '(("frederikbreandstrup@gmail.com" . "~/cal.org"))))

  (use-package polymode :quelpa t)

  (use-package poly-org
    :quelpa t
    :after polymode
    :mode ("//.org//'"))

  (use-package org-brain
    :quelpa t
    :config
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs)
    (evil-leader/set-key
      "n" 'org-brain-goto))

  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))

  (use-package org-plus-contrib
    :ensure t)

  (add-hook 'org-mode-hook
	    (lambda ()
	      (openwith-mode nil)
	      (org-display-inline-images t)))


  (defmath uconvert (v u)
    "Convert value V into compatible unit U"
    (math-convert-units v u))
#+END_SRC

**** org-extras
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun export-and-find ()
    (interactive)
    (org-latex-export-to-pdf)
    (find-file
     (format "%s.pdf" (file-name-base (buffer-name)))))

  (defun org-latex-include-header (packages)
    "Add a latex header with PACKAGES to the current document."
    (interactive
     (list (split-string (read-string "Package(s): "))))
    (save-excursion
      (if (not (search-backward "#+LATEX_HEADER: \\usepackage" nil t))
	  (if (not (search-backward "#+AUTHOR:" nil t))
	      (goto-char 0)))
      (forward-line)
      (dolist (package packages)
	(insert (concat "#+LATEX_HEADER: \\usepackage{" package "}\n")))))

  (defun org-latex-insert-meta (title author)
    "Insert TITLE and AUTHOR headers for latex."
    (interactive "sTitle: \nsAuthor: ")
    (save-excursion
      (goto-char (point-min))
      (insert "#+TITLE: " title "\n#+AUTHOR: " author "\n\n")))

  (defun org-reveal-add-root ()
    "Insert Reveal root tag for org-re-reveal exports"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (insert
       (format
	"#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/%s/\n"
	(cdr
	 (assoc 'version
		(with-current-buffer
		    (url-retrieve-synchronously
		     "https://api.cdnjs.com/libraries/reveal.js")
		  (goto-char (+ url-http-end-of-headers 1))
		  (json-read-object))))))))

  (defun org-macros-src-block-add-name (name)
    "Add a NAME to the current sourceblock."
    (interactive "sName: ")
    (save-excursion
      (if (not (search-backward "#+BEGIN_SRC" nil t))
	  (message "Src block not found"))
      (newline)
      (forward-line -1)
      (insert (concat "#+NAME: " name))))
#+END_SRC
** yaml
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yaml-mode
     :quelpa t)
   #+END_SRC
* programming
** company
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package company
     :quelpa t
     :init
     (global-company-mode t)
     :custom
     (company-idle-delay 0)
     (company-minimum-prefix-length 1))
   #+END_SRC
** lisp
   #+BEGIN_SRC emacs-lisp :tangle yes
   ;; common lisp
(use-package slime :quelpa t)
(use-package slime-company :quelpa t)

(load (expand-file-name "~/quicklisp/slime-helper.el"))
(setq inferior-lisp-program (executable-find "sbcl"))
(slime-setup '(slime-fancy slime-company))
;; get sbcl from package manager
;; get quicklisp too https://beta.quicklisp.org/quicklisp.lisp

;; elisp
(use-package elsa :quelpa t)

;; clojure
(use-package clojure-mode :quelpa t)
(use-package cider :quelpa t
  :custom
  (cider-lein-parameters "repl :headless :host localhost"))

(use-package flycheck-clojure :quelpa t)
(use-package helm-clojuredocs :quelpa t)
(use-package cljr-helm :quelpa t)

;; racket
(use-package racket-mode :quelpa t)
   #+END_SRC
** LSP
#+BEGIN_SRC emacs-lisp :tangle yes
;; (use-package cquery
;;   :quelpa t)
(use-package ccls
  :ensure t)

(use-package lsp-mode
  :quelpa t
  :commands lsp
  :config (require 'lsp-clients)
  (evil-leader/set-key
    "r d" 'lsp-ui-peek-find-definitions
    "r i" 'lsp-ui-peek-find-implementation
    "r r" 'lsp-ui-peek-find-references
    "r j" 'lsp-ui-find-next-reference
    "r k" 'lsp-ui-find-prev-reference))

(use-package lsp-ui
  :quelpa t
  :commands lsp-ui-mode)

(use-package company-lsp
  :quelpa t
  :commands company-lsp
  :config
  (push 'company-lsp company-backends))

(use-package dap-mode
  :quelpa t
  :config (require 'dap-gdb-lldb))


(lsp-register-client
 (make-lsp-client
  :new-connection (lsp-stdio-connection '("docker-langserver" "--stdio"))
  :major-modes '(dockerfile-mode)
  :server-id 'Docker))


(add-hook 'c++-mode-hook 'lsp)
(add-hook 'python-mode-hook 'lsp)
(add-hook 'rust-mode-hook 'lsp)
(add-hook 'dockerfile-mode-hook 'lsp)


#+END_SRC
** rust
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package cargo
      :quelpa t)

   (use-package toml-mode
      :quelpa t)

   (add-hook 'rust-mode-hook 'cargo-minor-mode)

   #+END_SRC
** Web
    #+BEGIN_SRC emacs-lisp :tangle yes
    ;; everything in one package
    (use-package web-mode
        :quelpa t
      :mode
      ("\\.js\\'" . web-mode)
      ("\\.css\\'" . web-mode)
      ("\\.jsx\\'" . web-mode)
      ("\\.tsx\\'" . typescript-mode)
      ("\\.html\\'" . web-mode)
      ("\\.scss\\'" . web-mode))

    ;; Macro>overload
    (use-package emmet-mode :quelpa t)
    (setq emmet-expand-jsx-className? t)


    ;; server static files
    (use-package impatient-mode
        :quelpa t)

    ;; typescript lang server
    (use-package tide
      :quelpa t
        :commands tide-mode
      :mode ("\\.tsx\\'" . tide-mode))

    (use-package react-snippets
        :quelpa t)

    (use-package json-mode
        :quelpa t)
#+END_SRC
** python
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package pipenv
     :quelpa t
     :hook (python-mode . pipenv-mode)
     :custom
     pipenv-projectile-after-switch-function
     #'pipenv-projectile-after-switch-extended)
   #+END_SRC
** yasnippet
   All the snippets! (or atleast most of them)
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package yasnippet-snippets :quelpa t)
   (use-package react-snippets :quelpa t)

   (use-package yasnippet
     :quelpa t
     :init
     (yas-global-mode 1))

   (use-package auto-yasnippet
     :quelpa t)
   #+END_SRC
* misc
** nix
 #+begin_SRC emacs-lisp :tangle yes
 (use-package nix-mode
   :quelpa t)

 (use-package helm-nixos-options
   :quelpa t)

 (use-package company-nixos-options
   :quelpa t)
 #+END_SRC
** mail
   #+BEGIN_SRC emacs-lisp :tangle yes
   (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
   (require 'mu4e)
   (require 'mu4e-contrib)


   (setq mu4e-html2text-command 'mu4e-shr2text)
   (add-hook 'mu4e-view-mode-hook
	     (lambda ()
	       (local-set-key (kbd "<tab>") 'shr-next-link)
	       (local-set-key (kbd "<backtab>") 'shr-previous-link)))


   #+END_SRC
* ui
** helm
 #+BEGIN_SRC emacs-lisp :tangle yes
 (use-package helm
   :quelpa t
   :config
   (require 'helm-config)
   (helm-mode))

 (use-package helm-make :quelpa t)
 (use-package helm-company :quelpa t)
 (use-package helm-swoop :quelpa t)
 (use-package helm-projectile :quelpa t)
 #+END_SRC
** theme
   #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package doom-themes
     :quelpa t
     :config
     (load-theme 'doom-solarized-light t))

   (use-package doom-modeline
     :quelpa t
     :hook (after-init . doom-modeline-init)
     :custom
     (doom-modeline-buffer-file-name-style 'relative-from-project)
     (doom-modeline-height 35)
     (doom-modeline-bar-width 4)
     (doom-modeline-lsp t)
     (doom-modeline-icon t)
     (doom-modeline-major-mode-icon t)
     (doom-modeline-major-mode-color-icon t))

   (use-package solaire-mode
     :quelpa t
     :config
     (solaire-global-mode))
   #+END_SRC
** Which key
 #+BEGIN_SRC emacs-lisp :tangle yes
   (use-package which-key
     :quelpa t
     :init
     (which-key-mode))
 #+END_SRC
** frames only
     for better compatibility with i3
     #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package frames-only-mode :quelpa t)
 #+END_SRC
** rainbow
* hotkeys
  #+BEGIN_SRC emacs-lisp :tangle yes
  (evil-leader/set-key
    ;; buffers & windows
    "b b" 'helm-buffers-list
    "b o" 'other-buffer
    "b i" 'ibuffer
    "o" 'other-window
    "q" 'kill-buffer

    ;; misc
    "a" 'comment-dwim
    "i" 'indent-region
    "w" '(lambda () (interactive)
	   (paredit-mode)
	   (evil-paredit-mode))

    ;;buffer navigation
    "j" 'evil-avy-goto-char

    ;; files
    "f f" 'fzf
    "f d" 'ranger
    "f e" '(lambda () (interactive) (find-file "~/.emacs.d/config.org"))
    "f i" '(lambda () (interactive) (find-file "~/.i3/config"))
    "f z" '(lambda () (interactive) (find-file "~/.zshrc"))
    "f n" '(lambda () (interactive)
	     (find-file "/etc/nixos/configuration.nix")
	     (sudo-edit))

    ;;treemacs
    "u" 'treemacs
    "t p" 'treemacs-add-project-to-workspace
    "t r" 'treemacs-remove-project-from-workspace

    ;; Projectile stuff
    "p p" 'projectile-find-file-dwim
    "p a" 'projectile-ag
    "p g" 'projectile-vc
    "c" 'helm-make-projectile

    ;; Git
    "g s" 'magit-status
    "g t" 'git-timemachine
    "g g" 'global-git-gutter+-mode

    ;;utilities
    "+" 'calc
    "-" 'mu4e

    "p p" 'helm-projectile
    "p f" 'helm-projectile-find-file-dwim
    "p a" 'helm-projectile-ag
    "p s" 'projectile-add-known-project
    "p c" 'projectile-compile-project)


  (evil-leader/set-key-for-mode 'cider-mode
    "r h" 'cljr-helm
    "r r" 'cider-eval-last-sexp
    "r k" 'cider-eval-buffer
    "r d" 'helm-clojuredocs
    "e" 'cider-eval-last-sexp
    "k" 'cider-eval-buffer)

  ;;global state
  (evil-define-key nil global-map (kbd "C-x C-f") 'helm-find-files)
  (evil-define-key nil global-map (kbd "C-x C-b") 'helm-buffers-list)
  (evil-define-key nil global-map (kbd "M-x") 'helm-M-x)
  (evil-define-key nil global-map (kbd "M-p") 'emmet-expand-yas)

  (evil-define-key 'normal global-map (kbd "'") 'evil-goto-mark)
  (evil-define-key 'normal global-map (kbd "´") 'evil-goto-mark-line)
  (evil-define-key 'normal global-map (kbd "C-e") 'merge-buffer)
  (evil-define-key 'normal global-map (kbd "Q") 'insert-output-of-executed-line)
  (evil-define-key 'normal global-map (kbd "C-U") 'aya-create)
  (evil-define-key 'normal global-map (kbd "C-I") 'aya-expand)


  ;; orgmode
  (evil-define-key 'normal poly-org-mode-map (kbd "U") 'export-and-find)
  (evil-define-key 'normal org-mode-map (kbd "U") 'export-and-find)
  #+END_SRC
